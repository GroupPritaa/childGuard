/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChildGuard {
  export type ActionRecordStruct = {
    id: BigNumberish;
    submitter: AddressLike;
    title: string;
    descriptionHash: string;
    region: string;
    date: string;
    timestamp: BigNumberish;
    supportCountEnc: BytesLike;
  };

  export type ActionRecordStructOutput = [
    id: bigint,
    submitter: string,
    title: string,
    descriptionHash: string,
    region: string,
    date: string,
    timestamp: bigint,
    supportCountEnc: string
  ] & {
    id: bigint;
    submitter: string;
    title: string;
    descriptionHash: string;
    region: string;
    date: string;
    timestamp: bigint;
    supportCountEnc: string;
  };
}

export interface ChildGuardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BADGE1_TARGET"
      | "BADGE2_TARGET"
      | "BADGE3_TARGET"
      | "SUBMIT_COOLDOWN"
      | "SUPPORT_DAILY_LIMIT"
      | "badgeClaimed"
      | "badgeContract"
      | "claimBadge"
      | "getAction"
      | "getActions"
      | "isEligible"
      | "lastSubmitAt"
      | "protocolId"
      | "records"
      | "regionCounts"
      | "setBadgeContract"
      | "submitAction"
      | "submitCount"
      | "supportAction"
      | "supportGivenCount"
      | "supportReceivedCount"
      | "supported"
      | "supportsPerDay"
      | "totalRecords"
      | "totalSupports"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionSubmitted"
      | "ActionSupported"
      | "BadgeClaimed"
      | "BadgeMintRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BADGE1_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BADGE2_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BADGE3_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMIT_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPORT_DAILY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSubmitAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regionCounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAction",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportAction",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportGivenCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportReceivedCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supported",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsPerDay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupports",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BADGE1_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BADGE2_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BADGE3_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMIT_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORT_DAILY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBadge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSubmitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regionCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportGivenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportReceivedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supported", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupports",
    data: BytesLike
  ): Result;
}

export namespace ActionSubmittedEvent {
  export type InputTuple = [submitter: AddressLike, id: BigNumberish];
  export type OutputTuple = [submitter: string, id: bigint];
  export interface OutputObject {
    submitter: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionSupportedEvent {
  export type InputTuple = [id: BigNumberish, supporter: AddressLike];
  export type OutputTuple = [id: bigint, supporter: string];
  export interface OutputObject {
    id: bigint;
    supporter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeClaimedEvent {
  export type InputTuple = [to: AddressLike, badgeId: BigNumberish];
  export type OutputTuple = [to: string, badgeId: bigint];
  export interface OutputObject {
    to: string;
    badgeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeMintRequestedEvent {
  export type InputTuple = [to: AddressLike, badgeId: BigNumberish];
  export type OutputTuple = [to: string, badgeId: bigint];
  export interface OutputObject {
    to: string;
    badgeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChildGuard extends BaseContract {
  connect(runner?: ContractRunner | null): ChildGuard;
  waitForDeployment(): Promise<this>;

  interface: ChildGuardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BADGE1_TARGET: TypedContractMethod<[], [bigint], "view">;

  BADGE2_TARGET: TypedContractMethod<[], [bigint], "view">;

  BADGE3_TARGET: TypedContractMethod<[], [bigint], "view">;

  SUBMIT_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  SUPPORT_DAILY_LIMIT: TypedContractMethod<[], [bigint], "view">;

  badgeClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  badgeContract: TypedContractMethod<[], [string], "view">;

  claimBadge: TypedContractMethod<
    [badgeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAction: TypedContractMethod<
    [recordId: BigNumberish],
    [ChildGuard.ActionRecordStructOutput],
    "view"
  >;

  getActions: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [ChildGuard.ActionRecordStructOutput[]],
    "view"
  >;

  isEligible: TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        eligible: boolean;
        progress: bigint;
        target: bigint;
      }
    ],
    "view"
  >;

  lastSubmitAt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  records: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, bigint, string] & {
        id: bigint;
        submitter: string;
        title: string;
        descriptionHash: string;
        region: string;
        date: string;
        timestamp: bigint;
        supportCountEnc: string;
      }
    ],
    "view"
  >;

  regionCounts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  setBadgeContract: TypedContractMethod<[c: AddressLike], [void], "nonpayable">;

  submitAction: TypedContractMethod<
    [title: string, descriptionHash: string, region: string, date: string],
    [void],
    "nonpayable"
  >;

  submitCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supportAction: TypedContractMethod<
    [recordId: BigNumberish, incEnc: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  supportGivenCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supportReceivedCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  supported: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  supportsPerDay: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  totalRecords: TypedContractMethod<[], [bigint], "view">;

  totalSupports: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BADGE1_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE2_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE3_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUBMIT_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUPPORT_DAILY_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "badgeClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "badgeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimBadge"
  ): TypedContractMethod<[badgeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAction"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [ChildGuard.ActionRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActions"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [ChildGuard.ActionRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        eligible: boolean;
        progress: bigint;
        target: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastSubmitAt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, bigint, string] & {
        id: bigint;
        submitter: string;
        title: string;
        descriptionHash: string;
        region: string;
        date: string;
        timestamp: bigint;
        supportCountEnc: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "regionCounts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBadgeContract"
  ): TypedContractMethod<[c: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAction"
  ): TypedContractMethod<
    [title: string, descriptionHash: string, region: string, date: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportAction"
  ): TypedContractMethod<
    [recordId: BigNumberish, incEnc: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportGivenCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportReceivedCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supported"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsPerDay"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalRecords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupports"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ActionSubmitted"
  ): TypedContractEvent<
    ActionSubmittedEvent.InputTuple,
    ActionSubmittedEvent.OutputTuple,
    ActionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ActionSupported"
  ): TypedContractEvent<
    ActionSupportedEvent.InputTuple,
    ActionSupportedEvent.OutputTuple,
    ActionSupportedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeClaimed"
  ): TypedContractEvent<
    BadgeClaimedEvent.InputTuple,
    BadgeClaimedEvent.OutputTuple,
    BadgeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeMintRequested"
  ): TypedContractEvent<
    BadgeMintRequestedEvent.InputTuple,
    BadgeMintRequestedEvent.OutputTuple,
    BadgeMintRequestedEvent.OutputObject
  >;

  filters: {
    "ActionSubmitted(address,uint256)": TypedContractEvent<
      ActionSubmittedEvent.InputTuple,
      ActionSubmittedEvent.OutputTuple,
      ActionSubmittedEvent.OutputObject
    >;
    ActionSubmitted: TypedContractEvent<
      ActionSubmittedEvent.InputTuple,
      ActionSubmittedEvent.OutputTuple,
      ActionSubmittedEvent.OutputObject
    >;

    "ActionSupported(uint256,address)": TypedContractEvent<
      ActionSupportedEvent.InputTuple,
      ActionSupportedEvent.OutputTuple,
      ActionSupportedEvent.OutputObject
    >;
    ActionSupported: TypedContractEvent<
      ActionSupportedEvent.InputTuple,
      ActionSupportedEvent.OutputTuple,
      ActionSupportedEvent.OutputObject
    >;

    "BadgeClaimed(address,uint256)": TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
    BadgeClaimed: TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;

    "BadgeMintRequested(address,uint256)": TypedContractEvent<
      BadgeMintRequestedEvent.InputTuple,
      BadgeMintRequestedEvent.OutputTuple,
      BadgeMintRequestedEvent.OutputObject
    >;
    BadgeMintRequested: TypedContractEvent<
      BadgeMintRequestedEvent.InputTuple,
      BadgeMintRequestedEvent.OutputTuple,
      BadgeMintRequestedEvent.OutputObject
    >;
  };
}
