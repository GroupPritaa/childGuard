{
  "address": "0x1fa964c4C53bd5eA9AE02d1A422407380e01E80E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ActionSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        }
      ],
      "name": "ActionSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        }
      ],
      "name": "BadgeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        }
      ],
      "name": "BadgeMintRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BADGE1_TARGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BADGE2_TARGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BADGE3_TARGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBMIT_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPPORT_DAILY_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "badgeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        }
      ],
      "name": "claimBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "recordId",
          "type": "uint256"
        }
      ],
      "name": "getAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "submitter",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "region",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "euint32",
              "name": "supportCountEnc",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ChildGuard.ActionRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "submitter",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "region",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "euint32",
              "name": "supportCountEnc",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ChildGuard.ActionRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "eligible",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "progress",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastSubmitAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "descriptionHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "euint32",
          "name": "supportCountEnc",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "regionCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "c",
          "type": "address"
        }
      ],
      "name": "setBadgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "descriptionHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "name": "submitAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "submitCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "recordId",
          "type": "uint256"
        },
        {
          "internalType": "externalEuint32",
          "name": "incEnc",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "inputProof",
          "type": "bytes"
        }
      ],
      "name": "supportAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportGivenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportReceivedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportsPerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0df8e3d2ad39611632e4c74a892ad293cb03fcdd901e04cfd00d7c29bebfd7b1",
  "receipt": {
    "to": null,
    "from": "0x8eceaA024CE000fd69B17Ff23d21019fd70e92be",
    "contractAddress": "0x1fa964c4C53bd5eA9AE02d1A422407380e01E80E",
    "transactionIndex": 99,
    "gasUsed": "1956146",
    "logsBloom": "0x
    "blockHash": "0xbd5f180d0137e83137fb8965001fd2262201bb20715e675d565413cef71ca3ae",
    "transactionHash": "0x0df8e3d2ad39611632e4c74a892ad293cb03fcdd901e04cfd00d7c29bebfd7b1",
    "logs": [],
    "blockNumber": 9429967,
    "cumulativeGasUsed": "16806741",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c6265a3c10a9e9c3ebdf98f342462e4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ActionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"}],\"name\":\"ActionSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"}],\"name\":\"BadgeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"}],\"name\":\"BadgeMintRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BADGE1_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGE2_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGE3_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBMIT_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPORT_DAILY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"badgeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"}],\"name\":\"claimBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"}],\"name\":\"getAction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"euint32\",\"name\":\"supportCountEnc\",\"type\":\"bytes32\"}],\"internalType\":\"struct ChildGuard.ActionRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"euint32\",\"name\":\"supportCountEnc\",\"type\":\"bytes32\"}],\"internalType\":\"struct ChildGuard.ActionRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSubmitAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"euint32\",\"name\":\"supportCountEnc\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"regionCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"}],\"name\":\"setBadgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"name\":\"submitAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"submitCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"internalType\":\"externalEuint32\",\"name\":\"incEnc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"inputProof\",\"type\":\"bytes\"}],\"name\":\"supportAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportGivenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportReceivedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportAction(uint256,bytes32,bytes)\":{\"params\":{\"incEnc\":\"\\u5916\\u90e8\\u52a0\\u5bc6\\u589e\\u91cf\\uff08e.g. 1\\uff09\",\"inputProof\":\"\\u8f93\\u5165\\u8bc1\\u660e\",\"recordId\":\"\\u8bb0\\u5f55 id\"}}},\"title\":\"ChildGuard \\u2013 \\u513f\\u7ae5\\u4fdd\\u62a4\\u884c\\u52a8\\u5b58\\u8bc1\\uff08FHE \\u589e\\u5f3a\\uff09\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAction(uint256)\":{\"notice\":\"\\u83b7\\u53d6\\u5355\\u6761\\u8bb0\\u5f55\\uff08\\u5305\\u542b\\u5bc6\\u6587\\u652f\\u6301\\u8ba1\\u6570\\u53e5\\u67c4\\uff09\"},\"getActions(uint256,uint256)\":{\"notice\":\"\\u83b7\\u53d6\\u4e00\\u9875\\u8bb0\\u5f55\\uff08\\u5206\\u9875\\uff0c\\u907f\\u514d getAllActions \\u8fc7\\u5927\\uff09\"},\"submitAction(string,string,string,string)\":{\"notice\":\"\\u63d0\\u4ea4\\u884c\\u52a8\\uff08\\u652f\\u6301\\u8ba1\\u6570\\u521d\\u59cb\\u5316\\u4e3a 0 \\u7684\\u5bc6\\u6587\\uff09\"},\"supportAction(uint256,bytes32,bytes)\":{\"notice\":\"\\u70b9\\u8d5e\\u652f\\u6301\\uff08\\u6bcf\\u5730\\u5740\\u5bf9\\u540c\\u4e00 id \\u4ec5\\u4e00\\u6b21\\uff09\\uff0c\\u4f20\\u5165\\u52a0\\u5bc6\\u589e\\u91cf\\uff08\\u901a\\u5e38\\u4e3a 1\\uff09\"}},\"notice\":\"\\u4f7f\\u7528 FHE \\u5bf9\\u652f\\u6301\\u8ba1\\u6570\\u8fdb\\u884c\\u52a0\\u5bc6\\u5b58\\u50a8\\uff0c\\u516c\\u5f00\\u67e5\\u8be2\\u8fd4\\u56de\\u5bc6\\u6587\\u53e5\\u67c4\\uff0c\\u89e3\\u5bc6\\u987b\\u7ecf\\u6388\\u6743\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChildGuard.sol\":\"ChildGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@fhevm/solidity/config/ZamaConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\npragma solidity ^0.8.24;\\n\\nimport {SepoliaZamaOracleAddress} from \\\"@zama-fhe/oracle-solidity/address/ZamaOracleAddress.sol\\\";\\nimport {FHE} from \\\"@fhevm/solidity/lib/FHE.sol\\\";\\nimport {CoprocessorConfig} from \\\"@fhevm/solidity/lib/Impl.sol\\\";\\n\\n/**\\n * @title   ZamaConfig.\\n * @notice  This library returns the FHEVM config for different networks\\n *          with the contract addresses for (1) ACL, (2) CoprocessorAddress, (3) DecryptionOracleAddress, (4) KMSVerifier,\\n *          which are deployed & maintained by Zama. It also returns the address of the decryption oracle.\\n */\\nlibrary ZamaConfig {\\n    function getSepoliaProtocolId() internal pure returns (uint256) {\\n        /// @note Zama Ethereum Sepolia protocol id is '10000 + Zama Ethereum protocol id'\\n        return 10001;\\n    }\\n\\n    function getSepoliaConfig() internal pure returns (CoprocessorConfig memory) {\\n        return\\n            CoprocessorConfig({\\n                ACLAddress: 0x687820221192C5B662b25367F70076A37bc79b6c,\\n                CoprocessorAddress: 0x848B0066793BcC60346Da1F49049357399B8D595,\\n                DecryptionOracleAddress: SepoliaZamaOracleAddress,\\n                KMSVerifierAddress: 0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC\\n            });\\n    }\\n\\n    function getEthereumProtocolId() internal pure returns (uint256) {\\n        /// @note Zama Ethereum protocol id is '1'\\n        return 1;\\n    }\\n\\n    function getEthereumConfig() internal pure returns (CoprocessorConfig memory) {\\n        /// @note The addresses below are placeholders and should be replaced with actual addresses\\n        /// once deployed on the Ethereum mainnet.\\n        return\\n            CoprocessorConfig({\\n                ACLAddress: address(0),\\n                CoprocessorAddress: address(0),\\n                DecryptionOracleAddress: address(0),\\n                KMSVerifierAddress: address(0)\\n            });\\n    }\\n}\\n\\n/**\\n * @title   SepoliaConfig.\\n * @dev     This contract can be inherited by a contract wishing to use the FHEVM contracts provided by Zama\\n *          on the Sepolia network (chainId = 11155111).\\n *          Other providers may offer similar contracts deployed at different addresses.\\n *          If you wish to use them, you should rely on the instructions from these providers.\\n */\\ncontract SepoliaConfig {\\n    constructor() {\\n        FHE.setCoprocessor(ZamaConfig.getSepoliaConfig());\\n    }\\n\\n    function protocolId() public pure returns (uint256) {\\n        return ZamaConfig.getSepoliaProtocolId();\\n    }\\n}\\n\\n/**\\n * @title   EthereumConfig.\\n * @dev     This contract can be inherited by a contract wishing to use the FHEVM contracts provided by Zama\\n *          on the Ethereum (mainnet) network (chainId = 1).\\n *          Other providers may offer similar contracts deployed at different addresses.\\n *          If you wish to use them, you should rely on the instructions from these providers.\\n */\\ncontract EthereumConfig {\\n    constructor() {\\n        FHE.setCoprocessor(ZamaConfig.getEthereumConfig());\\n    }\\n\\n    function protocolId() public pure returns (uint256) {\\n        return ZamaConfig.getEthereumProtocolId();\\n    }\\n}\\n\",\"keccak256\":\"0x01449813b21226f90d34e768e4449e5a1bf164831ccb30dc603e3d9cc9276dc6\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhevm/solidity/lib/FHE.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\npragma solidity ^0.8.24;\\n\\nimport \\\"./Impl.sol\\\";\\nimport {FheType} from \\\"./FheType.sol\\\";\\n\\nimport \\\"encrypted-types/EncryptedTypes.sol\\\";\\n\\n/**\\n * @title IKMSVerifier\\n * @notice This interface contains the only function required from KMSVerifier.\\n */\\ninterface IKMSVerifier {\\n    function verifyDecryptionEIP712KMSSignatures(\\n        bytes32[] memory handlesList,\\n        bytes memory decryptedResult,\\n        bytes memory decryptionProof\\n    ) external returns (bool);\\n}\\n\\n/**\\n * @title IDecryptionOracle\\n * @notice This interface contains the only function required from DecryptionOracle.\\n */\\ninterface IDecryptionOracle {\\n    function requestDecryption(\\n        uint256 requestID,\\n        bytes32[] calldata ctsHandles,\\n        bytes4 callbackSelector\\n    ) external payable;\\n}\\n\\n/**\\n * @title   FHE\\n * @notice  This library is the interaction point for all smart contract developers\\n *          that interact with the FHEVM protocol.\\n */\\nlibrary FHE {\\n    /// @notice Returned if some handles were already saved for corresponding ID.\\n    error HandlesAlreadySavedForRequestID();\\n\\n    /// @notice Returned if there was not handle found for the requested ID.\\n    error NoHandleFoundForRequestID();\\n\\n    /// @notice Returned if the returned KMS signatures are not valid.\\n    error InvalidKMSSignatures();\\n\\n    /// @notice This event is emitted when requested decryption has been fulfilled.\\n    event DecryptionFulfilled(uint256 indexed requestID);\\n\\n    /**\\n     * @notice                  Sets the coprocessor addresses.\\n     * @param coprocessorConfig Coprocessor config struct that contains contract addresses.\\n     */\\n    function setCoprocessor(CoprocessorConfig memory coprocessorConfig) internal {\\n        Impl.setCoprocessor(coprocessorConfig);\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(ebool v) internal pure returns (bool) {\\n        return ebool.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint8 v) internal pure returns (bool) {\\n        return euint8.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint16 v) internal pure returns (bool) {\\n        return euint16.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint32 v) internal pure returns (bool) {\\n        return euint32.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint64 v) internal pure returns (bool) {\\n        return euint64.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint128 v) internal pure returns (bool) {\\n        return euint128.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(eaddress v) internal pure returns (bool) {\\n        return eaddress.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the encrypted integer is initialized and false otherwise.\\n     */\\n    function isInitialized(euint256 v) internal pure returns (bool) {\\n        return euint256.unwrap(v) != 0;\\n    }\\n\\n    /**\\n     * @dev Evaluates and(ebool a, ebool b) and returns the result.\\n     */\\n    function and(ebool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.and(ebool.unwrap(a), ebool.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(ebool a, ebool b) and returns the result.\\n     */\\n    function or(ebool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.or(ebool.unwrap(a), ebool.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(ebool a, ebool b) and returns the result.\\n     */\\n    function xor(ebool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.xor(ebool.unwrap(a), ebool.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(ebool a, ebool b) and returns the result.\\n     */\\n    function eq(ebool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.eq(ebool.unwrap(a), ebool.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(ebool a, ebool b) and returns the result.\\n     */\\n    function ne(ebool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.ne(ebool.unwrap(a), ebool.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function add(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.add(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function sub(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.sub(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function mul(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.mul(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.and(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.or(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.xor(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function ge(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function gt(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function le(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function lt(euint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function min(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.min(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, euint8 b)  and returns the result.\\n     */\\n    function max(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.max(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function add(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.add(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function sub(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.sub(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function mul(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.mul(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.and(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.or(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.xor(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function ge(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function gt(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function le(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function lt(euint8 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function min(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.min(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, euint16 b)  and returns the result.\\n     */\\n    function max(euint8 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.max(euint16.unwrap(asEuint16(a)), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function add(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function sub(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function mul(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function ge(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function gt(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function le(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function lt(euint8 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function min(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, euint32 b)  and returns the result.\\n     */\\n    function max(euint8 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function add(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function sub(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function mul(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function ge(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function gt(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function le(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function lt(euint8 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function min(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, euint64 b)  and returns the result.\\n     */\\n    function max(euint8 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function add(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function sub(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function mul(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function ge(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function gt(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function le(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function lt(euint8 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function min(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, euint128 b)  and returns the result.\\n     */\\n    function max(euint8 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint8 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint8 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint8 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint8 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint8 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function add(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.add(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function sub(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function mul(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.and(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.or(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function ge(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function gt(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function le(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function lt(euint16 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function min(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.min(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, euint8 b)  and returns the result.\\n     */\\n    function max(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.max(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function add(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.add(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function sub(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function mul(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.and(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.or(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function ge(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function gt(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function le(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function lt(euint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function min(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.min(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, euint16 b)  and returns the result.\\n     */\\n    function max(euint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.max(euint16.unwrap(a), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function add(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function sub(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function mul(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function ge(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function gt(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function le(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function lt(euint16 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function min(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, euint32 b)  and returns the result.\\n     */\\n    function max(euint16 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(asEuint32(a)), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function add(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function sub(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function mul(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function ge(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function gt(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function le(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function lt(euint16 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function min(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, euint64 b)  and returns the result.\\n     */\\n    function max(euint16 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function add(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function sub(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function mul(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function ge(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function gt(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function le(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function lt(euint16 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function min(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, euint128 b)  and returns the result.\\n     */\\n    function max(euint16 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint16 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint16 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint16 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint16 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint16 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function add(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function sub(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function mul(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function ge(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function gt(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function le(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function lt(euint32 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function min(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, euint8 b)  and returns the result.\\n     */\\n    function max(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function add(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function sub(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function mul(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function ge(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function gt(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function le(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function lt(euint32 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function min(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, euint16 b)  and returns the result.\\n     */\\n    function max(euint32 a, euint16 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function add(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function sub(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function mul(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function ge(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function gt(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function le(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function lt(euint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function min(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, euint32 b)  and returns the result.\\n     */\\n    function max(euint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(a), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function add(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function sub(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function mul(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function ge(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function gt(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function le(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function lt(euint32 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function min(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, euint64 b)  and returns the result.\\n     */\\n    function max(euint32 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(asEuint64(a)), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function add(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function sub(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function mul(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function ge(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function gt(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function le(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function lt(euint32 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function min(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, euint128 b)  and returns the result.\\n     */\\n    function max(euint32 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint32 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint32 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint32 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint32 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint32 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function add(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function sub(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function mul(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function ge(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function gt(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function le(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function lt(euint64 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function min(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, euint8 b)  and returns the result.\\n     */\\n    function max(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function add(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function sub(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function mul(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function ge(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function gt(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function le(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function lt(euint64 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function min(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, euint16 b)  and returns the result.\\n     */\\n    function max(euint64 a, euint16 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function add(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function sub(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function mul(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function ge(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function gt(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function le(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function lt(euint64 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function min(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, euint32 b)  and returns the result.\\n     */\\n    function max(euint64 a, euint32 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function add(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function sub(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function mul(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function ge(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function gt(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function le(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function lt(euint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function min(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, euint64 b)  and returns the result.\\n     */\\n    function max(euint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(a), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function add(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function sub(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function mul(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function ge(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function gt(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function le(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function lt(euint64 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function min(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, euint128 b)  and returns the result.\\n     */\\n    function max(euint64 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(asEuint128(a)), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint64 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint64 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint64 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint64 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint64 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function add(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function sub(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function mul(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function ge(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function gt(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function le(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function lt(euint128 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function min(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, euint8 b)  and returns the result.\\n     */\\n    function max(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function add(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function sub(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function mul(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function ge(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function gt(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function le(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function lt(euint128 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function min(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, euint16 b)  and returns the result.\\n     */\\n    function max(euint128 a, euint16 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function add(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function sub(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function mul(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function ge(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function gt(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function le(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function lt(euint128 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function min(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, euint32 b)  and returns the result.\\n     */\\n    function max(euint128 a, euint32 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function add(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function sub(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function mul(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function ge(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function gt(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function le(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function lt(euint128 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function min(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, euint64 b)  and returns the result.\\n     */\\n    function max(euint128 a, euint64 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function add(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function sub(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function mul(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function ge(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function gt(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function le(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function lt(euint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function min(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, euint128 b)  and returns the result.\\n     */\\n    function max(euint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint128 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint128 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint128 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint128 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint128 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(asEuint256(a)), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(eaddress a, eaddress b) and returns the result.\\n     */\\n    function eq(eaddress a, eaddress b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEaddress(address(0));\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.eq(eaddress.unwrap(a), eaddress.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(eaddress a, eaddress b) and returns the result.\\n     */\\n    function ne(eaddress a, eaddress b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEaddress(address(0));\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.ne(eaddress.unwrap(a), eaddress.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint8 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint8 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint8 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint8 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint8 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint16 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint16 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint16 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint16 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint16 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint16 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint16 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint16 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint32 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint32 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint32 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint32 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint32 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint32 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint32 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint32 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint64 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint64 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint64 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint64 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint64 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint64 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint64 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint64 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint128 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint128 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint128 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint128 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint128 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint128 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint128 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint128 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, euint256 b)  and returns the result.\\n     */\\n    function and(euint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, euint256 b)  and returns the result.\\n     */\\n    function or(euint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, euint256 b)  and returns the result.\\n     */\\n    function xor(euint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, euint256 b)  and returns the result.\\n     */\\n    function eq(euint256 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, euint256 b)  and returns the result.\\n     */\\n    function ne(euint256 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), euint256.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(ebool a, bool b) and returns the result.\\n     */\\n    function and(ebool a, bool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.and(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(bool a, ebool b) and returns the result.\\n     */\\n    function and(bool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.and(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(ebool a, bool b) and returns the result.\\n     */\\n    function or(ebool a, bool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.or(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(bool a, ebool b) and returns the result.\\n     */\\n    function or(bool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.or(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(ebool a, bool b) and returns the result.\\n     */\\n    function xor(ebool a, bool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.xor(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(bool a, ebool b) and returns the result.\\n     */\\n    function xor(bool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.xor(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(ebool a, bool b) and returns the result.\\n     */\\n    function eq(ebool a, bool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.eq(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(bool a, ebool b) and returns the result.\\n     */\\n    function eq(bool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.eq(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(ebool a, bool b) and returns the result.\\n     */\\n    function ne(ebool a, bool b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.ne(ebool.unwrap(a), bytes32(uint256(b ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(bool a, ebool b) and returns the result.\\n     */\\n    function ne(bool a, ebool b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEbool(false);\\n        }\\n        return ebool.wrap(Impl.ne(ebool.unwrap(b), bytes32(uint256(a ? 1 : 0)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint8 a, uint8 b) and returns the result.\\n     */\\n    function add(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.add(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(uint8 a, euint8 b) and returns the result.\\n     */\\n    function add(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.add(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint8 a, uint8 b) and returns the result.\\n     */\\n    function sub(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.sub(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(uint8 a, euint8 b) and returns the result.\\n     */\\n    function sub(uint8 a, euint8 b) internal returns (euint8) {\\n        euint8 aEnc = asEuint8(a);\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.sub(euint8.unwrap(aEnc), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint8 a, uint8 b) and returns the result.\\n     */\\n    function mul(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.mul(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(uint8 a, euint8 b) and returns the result.\\n     */\\n    function mul(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.mul(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates div(euint8 a, uint8 b) and returns the result.\\n     */\\n    function div(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.div(euint8.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates rem(euint8 a, uint8 b) and returns the result.\\n     */\\n    function rem(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.rem(euint8.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint8 a, uint8 b) and returns the result.\\n     */\\n    function and(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.and(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint8 a, euint8 b) and returns the result.\\n     */\\n    function and(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.and(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint8 a, uint8 b) and returns the result.\\n     */\\n    function or(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.or(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint8 a, euint8 b) and returns the result.\\n     */\\n    function or(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.or(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint8 a, uint8 b) and returns the result.\\n     */\\n    function xor(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.xor(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint8 a, euint8 b) and returns the result.\\n     */\\n    function xor(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.xor(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint8 a, uint8 b) and returns the result.\\n     */\\n    function eq(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint8 a, euint8 b) and returns the result.\\n     */\\n    function eq(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint8 a, uint8 b) and returns the result.\\n     */\\n    function ne(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint8 a, euint8 b) and returns the result.\\n     */\\n    function ne(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint8 a, uint8 b) and returns the result.\\n     */\\n    function ge(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(uint8 a, euint8 b) and returns the result.\\n     */\\n    function ge(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint8 a, uint8 b) and returns the result.\\n     */\\n    function gt(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(uint8 a, euint8 b) and returns the result.\\n     */\\n    function gt(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint8 a, uint8 b) and returns the result.\\n     */\\n    function le(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.le(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(uint8 a, euint8 b) and returns the result.\\n     */\\n    function le(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint8 a, uint8 b) and returns the result.\\n     */\\n    function lt(euint8 a, uint8 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(uint8 a, euint8 b) and returns the result.\\n     */\\n    function lt(uint8 a, euint8 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint8 a, uint8 b) and returns the result.\\n     */\\n    function min(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.min(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(uint8 a, euint8 b) and returns the result.\\n     */\\n    function min(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.min(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint8 a, uint8 b) and returns the result.\\n     */\\n    function max(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.max(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(uint8 a, euint8 b) and returns the result.\\n     */\\n    function max(uint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.max(euint8.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint16 a, uint16 b) and returns the result.\\n     */\\n    function add(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.add(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(uint16 a, euint16 b) and returns the result.\\n     */\\n    function add(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.add(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint16 a, uint16 b) and returns the result.\\n     */\\n    function sub(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.sub(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(uint16 a, euint16 b) and returns the result.\\n     */\\n    function sub(uint16 a, euint16 b) internal returns (euint16) {\\n        euint16 aEnc = asEuint16(a);\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.sub(euint16.unwrap(aEnc), euint16.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint16 a, uint16 b) and returns the result.\\n     */\\n    function mul(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.mul(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(uint16 a, euint16 b) and returns the result.\\n     */\\n    function mul(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.mul(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates div(euint16 a, uint16 b) and returns the result.\\n     */\\n    function div(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.div(euint16.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates rem(euint16 a, uint16 b) and returns the result.\\n     */\\n    function rem(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.rem(euint16.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint16 a, uint16 b) and returns the result.\\n     */\\n    function and(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.and(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint16 a, euint16 b) and returns the result.\\n     */\\n    function and(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.and(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint16 a, uint16 b) and returns the result.\\n     */\\n    function or(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.or(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint16 a, euint16 b) and returns the result.\\n     */\\n    function or(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.or(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint16 a, uint16 b) and returns the result.\\n     */\\n    function xor(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.xor(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint16 a, euint16 b) and returns the result.\\n     */\\n    function xor(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.xor(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint16 a, uint16 b) and returns the result.\\n     */\\n    function eq(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint16 a, euint16 b) and returns the result.\\n     */\\n    function eq(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint16 a, uint16 b) and returns the result.\\n     */\\n    function ne(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint16 a, euint16 b) and returns the result.\\n     */\\n    function ne(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint16 a, uint16 b) and returns the result.\\n     */\\n    function ge(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(uint16 a, euint16 b) and returns the result.\\n     */\\n    function ge(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint16 a, uint16 b) and returns the result.\\n     */\\n    function gt(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(uint16 a, euint16 b) and returns the result.\\n     */\\n    function gt(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint16 a, uint16 b) and returns the result.\\n     */\\n    function le(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.le(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(uint16 a, euint16 b) and returns the result.\\n     */\\n    function le(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint16 a, uint16 b) and returns the result.\\n     */\\n    function lt(euint16 a, uint16 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(uint16 a, euint16 b) and returns the result.\\n     */\\n    function lt(uint16 a, euint16 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint16 a, uint16 b) and returns the result.\\n     */\\n    function min(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.min(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(uint16 a, euint16 b) and returns the result.\\n     */\\n    function min(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.min(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint16 a, uint16 b) and returns the result.\\n     */\\n    function max(euint16 a, uint16 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.max(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(uint16 a, euint16 b) and returns the result.\\n     */\\n    function max(uint16 a, euint16 b) internal returns (euint16) {\\n        if (!isInitialized(b)) {\\n            b = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.max(euint16.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint32 a, uint32 b) and returns the result.\\n     */\\n    function add(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(uint32 a, euint32 b) and returns the result.\\n     */\\n    function add(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.add(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint32 a, uint32 b) and returns the result.\\n     */\\n    function sub(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(uint32 a, euint32 b) and returns the result.\\n     */\\n    function sub(uint32 a, euint32 b) internal returns (euint32) {\\n        euint32 aEnc = asEuint32(a);\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.sub(euint32.unwrap(aEnc), euint32.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint32 a, uint32 b) and returns the result.\\n     */\\n    function mul(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(uint32 a, euint32 b) and returns the result.\\n     */\\n    function mul(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.mul(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates div(euint32 a, uint32 b) and returns the result.\\n     */\\n    function div(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.div(euint32.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates rem(euint32 a, uint32 b) and returns the result.\\n     */\\n    function rem(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.rem(euint32.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint32 a, uint32 b) and returns the result.\\n     */\\n    function and(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint32 a, euint32 b) and returns the result.\\n     */\\n    function and(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.and(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint32 a, uint32 b) and returns the result.\\n     */\\n    function or(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint32 a, euint32 b) and returns the result.\\n     */\\n    function or(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.or(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint32 a, uint32 b) and returns the result.\\n     */\\n    function xor(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint32 a, euint32 b) and returns the result.\\n     */\\n    function xor(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.xor(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint32 a, uint32 b) and returns the result.\\n     */\\n    function eq(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint32 a, euint32 b) and returns the result.\\n     */\\n    function eq(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint32 a, uint32 b) and returns the result.\\n     */\\n    function ne(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint32 a, euint32 b) and returns the result.\\n     */\\n    function ne(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint32 a, uint32 b) and returns the result.\\n     */\\n    function ge(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(uint32 a, euint32 b) and returns the result.\\n     */\\n    function ge(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint32 a, uint32 b) and returns the result.\\n     */\\n    function gt(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(uint32 a, euint32 b) and returns the result.\\n     */\\n    function gt(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint32 a, uint32 b) and returns the result.\\n     */\\n    function le(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.le(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(uint32 a, euint32 b) and returns the result.\\n     */\\n    function le(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint32 a, uint32 b) and returns the result.\\n     */\\n    function lt(euint32 a, uint32 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(uint32 a, euint32 b) and returns the result.\\n     */\\n    function lt(uint32 a, euint32 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint32 a, uint32 b) and returns the result.\\n     */\\n    function min(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(uint32 a, euint32 b) and returns the result.\\n     */\\n    function min(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.min(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint32 a, uint32 b) and returns the result.\\n     */\\n    function max(euint32 a, uint32 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(uint32 a, euint32 b) and returns the result.\\n     */\\n    function max(uint32 a, euint32 b) internal returns (euint32) {\\n        if (!isInitialized(b)) {\\n            b = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.max(euint32.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint64 a, uint64 b) and returns the result.\\n     */\\n    function add(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(uint64 a, euint64 b) and returns the result.\\n     */\\n    function add(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.add(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint64 a, uint64 b) and returns the result.\\n     */\\n    function sub(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(uint64 a, euint64 b) and returns the result.\\n     */\\n    function sub(uint64 a, euint64 b) internal returns (euint64) {\\n        euint64 aEnc = asEuint64(a);\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.sub(euint64.unwrap(aEnc), euint64.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint64 a, uint64 b) and returns the result.\\n     */\\n    function mul(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(uint64 a, euint64 b) and returns the result.\\n     */\\n    function mul(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.mul(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates div(euint64 a, uint64 b) and returns the result.\\n     */\\n    function div(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.div(euint64.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates rem(euint64 a, uint64 b) and returns the result.\\n     */\\n    function rem(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.rem(euint64.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint64 a, uint64 b) and returns the result.\\n     */\\n    function and(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint64 a, euint64 b) and returns the result.\\n     */\\n    function and(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.and(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint64 a, uint64 b) and returns the result.\\n     */\\n    function or(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint64 a, euint64 b) and returns the result.\\n     */\\n    function or(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.or(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint64 a, uint64 b) and returns the result.\\n     */\\n    function xor(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint64 a, euint64 b) and returns the result.\\n     */\\n    function xor(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.xor(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint64 a, uint64 b) and returns the result.\\n     */\\n    function eq(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint64 a, euint64 b) and returns the result.\\n     */\\n    function eq(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint64 a, uint64 b) and returns the result.\\n     */\\n    function ne(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint64 a, euint64 b) and returns the result.\\n     */\\n    function ne(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint64 a, uint64 b) and returns the result.\\n     */\\n    function ge(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(uint64 a, euint64 b) and returns the result.\\n     */\\n    function ge(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint64 a, uint64 b) and returns the result.\\n     */\\n    function gt(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(uint64 a, euint64 b) and returns the result.\\n     */\\n    function gt(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint64 a, uint64 b) and returns the result.\\n     */\\n    function le(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.le(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(uint64 a, euint64 b) and returns the result.\\n     */\\n    function le(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint64 a, uint64 b) and returns the result.\\n     */\\n    function lt(euint64 a, uint64 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(uint64 a, euint64 b) and returns the result.\\n     */\\n    function lt(uint64 a, euint64 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint64 a, uint64 b) and returns the result.\\n     */\\n    function min(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(uint64 a, euint64 b) and returns the result.\\n     */\\n    function min(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.min(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint64 a, uint64 b) and returns the result.\\n     */\\n    function max(euint64 a, uint64 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(uint64 a, euint64 b) and returns the result.\\n     */\\n    function max(uint64 a, euint64 b) internal returns (euint64) {\\n        if (!isInitialized(b)) {\\n            b = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.max(euint64.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(euint128 a, uint128 b) and returns the result.\\n     */\\n    function add(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates add(uint128 a, euint128 b) and returns the result.\\n     */\\n    function add(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.add(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(euint128 a, uint128 b) and returns the result.\\n     */\\n    function sub(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates sub(uint128 a, euint128 b) and returns the result.\\n     */\\n    function sub(uint128 a, euint128 b) internal returns (euint128) {\\n        euint128 aEnc = asEuint128(a);\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.sub(euint128.unwrap(aEnc), euint128.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(euint128 a, uint128 b) and returns the result.\\n     */\\n    function mul(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates mul(uint128 a, euint128 b) and returns the result.\\n     */\\n    function mul(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.mul(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates div(euint128 a, uint128 b) and returns the result.\\n     */\\n    function div(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.div(euint128.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates rem(euint128 a, uint128 b) and returns the result.\\n     */\\n    function rem(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.rem(euint128.unwrap(a), bytes32(uint256(b))));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint128 a, uint128 b) and returns the result.\\n     */\\n    function and(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint128 a, euint128 b) and returns the result.\\n     */\\n    function and(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.and(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint128 a, uint128 b) and returns the result.\\n     */\\n    function or(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint128 a, euint128 b) and returns the result.\\n     */\\n    function or(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.or(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint128 a, uint128 b) and returns the result.\\n     */\\n    function xor(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint128 a, euint128 b) and returns the result.\\n     */\\n    function xor(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.xor(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint128 a, uint128 b) and returns the result.\\n     */\\n    function eq(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint128 a, euint128 b) and returns the result.\\n     */\\n    function eq(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint128 a, uint128 b) and returns the result.\\n     */\\n    function ne(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint128 a, euint128 b) and returns the result.\\n     */\\n    function ne(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(euint128 a, uint128 b) and returns the result.\\n     */\\n    function ge(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ge(uint128 a, euint128 b) and returns the result.\\n     */\\n    function ge(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(euint128 a, uint128 b) and returns the result.\\n     */\\n    function gt(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates gt(uint128 a, euint128 b) and returns the result.\\n     */\\n    function gt(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(euint128 a, uint128 b) and returns the result.\\n     */\\n    function le(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.le(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates le(uint128 a, euint128 b) and returns the result.\\n     */\\n    function le(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.ge(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(euint128 a, uint128 b) and returns the result.\\n     */\\n    function lt(euint128 a, uint128 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.lt(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates lt(uint128 a, euint128 b) and returns the result.\\n     */\\n    function lt(uint128 a, euint128 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return ebool.wrap(Impl.gt(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(euint128 a, uint128 b) and returns the result.\\n     */\\n    function min(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates min(uint128 a, euint128 b) and returns the result.\\n     */\\n    function min(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.min(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(euint128 a, uint128 b) and returns the result.\\n     */\\n    function max(euint128 a, uint128 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates max(uint128 a, euint128 b) and returns the result.\\n     */\\n    function max(uint128 a, euint128 b) internal returns (euint128) {\\n        if (!isInitialized(b)) {\\n            b = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.max(euint128.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(eaddress a, address b) and returns the result.\\n     */\\n    function eq(eaddress a, address b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.eq(eaddress.unwrap(a), bytes32(uint256(uint160(b))), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(address a, eaddress b) and returns the result.\\n     */\\n    function eq(address a, eaddress b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.eq(eaddress.unwrap(b), bytes32(uint256(uint160(a))), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(eaddress a, address b) and returns the result.\\n     */\\n    function ne(eaddress a, address b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.ne(eaddress.unwrap(a), bytes32(uint256(uint160(b))), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(address a, eaddress b) and returns the result.\\n     */\\n    function ne(address a, eaddress b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEaddress(address(0));\\n        }\\n        return ebool.wrap(Impl.ne(eaddress.unwrap(b), bytes32(uint256(uint160(a))), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(euint256 a, uint256 b) and returns the result.\\n     */\\n    function and(euint256 a, uint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates and(uint256 a, euint256 b) and returns the result.\\n     */\\n    function and(uint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.and(euint256.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(euint256 a, uint256 b) and returns the result.\\n     */\\n    function or(euint256 a, uint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates or(uint256 a, euint256 b) and returns the result.\\n     */\\n    function or(uint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.or(euint256.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(euint256 a, uint256 b) and returns the result.\\n     */\\n    function xor(euint256 a, uint256 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates xor(uint256 a, euint256 b) and returns the result.\\n     */\\n    function xor(uint256 a, euint256 b) internal returns (euint256) {\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.xor(euint256.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(euint256 a, uint256 b) and returns the result.\\n     */\\n    function eq(euint256 a, uint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates eq(uint256 a, euint256 b) and returns the result.\\n     */\\n    function eq(uint256 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.eq(euint256.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(euint256 a, uint256 b) and returns the result.\\n     */\\n    function ne(euint256 a, uint256 b) internal returns (ebool) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates ne(uint256 a, euint256 b) and returns the result.\\n     */\\n    function ne(uint256 a, euint256 b) internal returns (ebool) {\\n        if (!isInitialized(b)) {\\n            b = asEuint256(0);\\n        }\\n        return ebool.wrap(Impl.ne(euint256.unwrap(b), bytes32(uint256(a)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint8 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.shl(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint8 a, uint8) and returns the result.\\n     */\\n    function shl(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.shl(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint8 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.shr(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint8 a, uint8) and returns the result.\\n     */\\n    function shr(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.shr(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint8 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.rotl(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint8 a, uint8) and returns the result.\\n     */\\n    function rotl(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.rotl(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint8 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint8 a, euint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.rotr(euint8.unwrap(a), euint8.unwrap(b), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint8 a, uint8) and returns the result.\\n     */\\n    function rotr(euint8 a, uint8 b) internal returns (euint8) {\\n        if (!isInitialized(a)) {\\n            a = asEuint8(0);\\n        }\\n        return euint8.wrap(Impl.rotr(euint8.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint16 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.shl(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint16 a, uint8) and returns the result.\\n     */\\n    function shl(euint16 a, uint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.shl(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint16 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.shr(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint16 a, uint8) and returns the result.\\n     */\\n    function shr(euint16 a, uint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.shr(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint16 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.rotl(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint16 a, uint8) and returns the result.\\n     */\\n    function rotl(euint16 a, uint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.rotl(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint16 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint16 a, euint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint16.wrap(Impl.rotr(euint16.unwrap(a), euint16.unwrap(asEuint16(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint16 a, uint8) and returns the result.\\n     */\\n    function rotr(euint16 a, uint8 b) internal returns (euint16) {\\n        if (!isInitialized(a)) {\\n            a = asEuint16(0);\\n        }\\n        return euint16.wrap(Impl.rotr(euint16.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint32 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.shl(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint32 a, uint8) and returns the result.\\n     */\\n    function shl(euint32 a, uint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.shl(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint32 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.shr(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint32 a, uint8) and returns the result.\\n     */\\n    function shr(euint32 a, uint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.shr(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint32 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.rotl(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint32 a, uint8) and returns the result.\\n     */\\n    function rotl(euint32 a, uint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.rotl(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint32 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint32 a, euint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint32.wrap(Impl.rotr(euint32.unwrap(a), euint32.unwrap(asEuint32(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint32 a, uint8) and returns the result.\\n     */\\n    function rotr(euint32 a, uint8 b) internal returns (euint32) {\\n        if (!isInitialized(a)) {\\n            a = asEuint32(0);\\n        }\\n        return euint32.wrap(Impl.rotr(euint32.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint64 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.shl(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint64 a, uint8) and returns the result.\\n     */\\n    function shl(euint64 a, uint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.shl(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint64 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.shr(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint64 a, uint8) and returns the result.\\n     */\\n    function shr(euint64 a, uint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.shr(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint64 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.rotl(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint64 a, uint8) and returns the result.\\n     */\\n    function rotl(euint64 a, uint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.rotl(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint64 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint64 a, euint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint64.wrap(Impl.rotr(euint64.unwrap(a), euint64.unwrap(asEuint64(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint64 a, uint8) and returns the result.\\n     */\\n    function rotr(euint64 a, uint8 b) internal returns (euint64) {\\n        if (!isInitialized(a)) {\\n            a = asEuint64(0);\\n        }\\n        return euint64.wrap(Impl.rotr(euint64.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint128 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.shl(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint128 a, uint8) and returns the result.\\n     */\\n    function shl(euint128 a, uint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.shl(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint128 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.shr(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint128 a, uint8) and returns the result.\\n     */\\n    function shr(euint128 a, uint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.shr(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint128 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.rotl(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint128 a, uint8) and returns the result.\\n     */\\n    function rotl(euint128 a, uint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.rotl(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint128 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint128 a, euint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint128.wrap(Impl.rotr(euint128.unwrap(a), euint128.unwrap(asEuint128(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint128 a, uint8) and returns the result.\\n     */\\n    function rotr(euint128 a, uint8 b) internal returns (euint128) {\\n        if (!isInitialized(a)) {\\n            a = asEuint128(0);\\n        }\\n        return euint128.wrap(Impl.rotr(euint128.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint256 a, euint8 b) and returns the result.\\n     */\\n    function shl(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.shl(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shl(euint256 a, uint8) and returns the result.\\n     */\\n    function shl(euint256 a, uint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.shl(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint256 a, euint8 b) and returns the result.\\n     */\\n    function shr(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.shr(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates shr(euint256 a, uint8) and returns the result.\\n     */\\n    function shr(euint256 a, uint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.shr(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint256 a, euint8 b) and returns the result.\\n     */\\n    function rotl(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.rotl(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotl(euint256 a, uint8) and returns the result.\\n     */\\n    function rotl(euint256 a, uint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.rotl(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint256 a, euint8 b) and returns the result.\\n     */\\n    function rotr(euint256 a, euint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        if (!isInitialized(b)) {\\n            b = asEuint8(0);\\n        }\\n        return euint256.wrap(Impl.rotr(euint256.unwrap(a), euint256.unwrap(asEuint256(b)), false));\\n    }\\n\\n    /**\\n     * @dev Evaluates rotr(euint256 a, uint8) and returns the result.\\n     */\\n    function rotr(euint256 a, uint8 b) internal returns (euint256) {\\n        if (!isInitialized(a)) {\\n            a = asEuint256(0);\\n        }\\n        return euint256.wrap(Impl.rotr(euint256.unwrap(a), bytes32(uint256(b)), true));\\n    }\\n\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, ebool a, ebool b) internal returns (ebool) {\\n        return ebool.wrap(Impl.select(ebool.unwrap(control), ebool.unwrap(a), ebool.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint8 a, euint8 b) internal returns (euint8) {\\n        return euint8.wrap(Impl.select(ebool.unwrap(control), euint8.unwrap(a), euint8.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint16 a, euint16 b) internal returns (euint16) {\\n        return euint16.wrap(Impl.select(ebool.unwrap(control), euint16.unwrap(a), euint16.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint32 a, euint32 b) internal returns (euint32) {\\n        return euint32.wrap(Impl.select(ebool.unwrap(control), euint32.unwrap(a), euint32.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint64 a, euint64 b) internal returns (euint64) {\\n        return euint64.wrap(Impl.select(ebool.unwrap(control), euint64.unwrap(a), euint64.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint128 a, euint128 b) internal returns (euint128) {\\n        return euint128.wrap(Impl.select(ebool.unwrap(control), euint128.unwrap(a), euint128.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, eaddress a, eaddress b) internal returns (eaddress) {\\n        return eaddress.wrap(Impl.select(ebool.unwrap(control), eaddress.unwrap(a), eaddress.unwrap(b)));\\n    }\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(ebool control, euint256 a, euint256 b) internal returns (euint256) {\\n        return euint256.wrap(Impl.select(ebool.unwrap(control), euint256.unwrap(a), euint256.unwrap(b)));\\n    }\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'euint8'.\\n     */\\n    function asEuint8(euint16 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'euint8'.\\n     */\\n    function asEuint8(euint32 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'euint8'.\\n     */\\n    function asEuint8(euint64 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'euint8'.\\n     */\\n    function asEuint8(euint128 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'euint8'.\\n     */\\n    function asEuint8(euint256 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint8));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint8'.\\n     */\\n    function asEuint8(ebool b) internal returns (euint8) {\\n        return euint8.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'ebool'.\\n     */\\n    function asEbool(euint8 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'euint16'.\\n     */\\n    function asEuint16(euint8 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'euint16'.\\n     */\\n    function asEuint16(euint32 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'euint16'.\\n     */\\n    function asEuint16(euint64 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'euint16'.\\n     */\\n    function asEuint16(euint128 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'euint16'.\\n     */\\n    function asEuint16(euint256 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint16));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint16'.\\n     */\\n    function asEuint16(ebool b) internal returns (euint16) {\\n        return euint16.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'ebool'.\\n     */\\n    function asEbool(euint16 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'euint32'.\\n     */\\n    function asEuint32(euint8 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'euint32'.\\n     */\\n    function asEuint32(euint16 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'euint32'.\\n     */\\n    function asEuint32(euint64 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'euint32'.\\n     */\\n    function asEuint32(euint128 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'euint32'.\\n     */\\n    function asEuint32(euint256 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint32));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint32'.\\n     */\\n    function asEuint32(ebool b) internal returns (euint32) {\\n        return euint32.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'ebool'.\\n     */\\n    function asEbool(euint32 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'euint64'.\\n     */\\n    function asEuint64(euint8 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'euint64'.\\n     */\\n    function asEuint64(euint16 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'euint64'.\\n     */\\n    function asEuint64(euint32 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'euint64'.\\n     */\\n    function asEuint64(euint128 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'euint64'.\\n     */\\n    function asEuint64(euint256 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint64));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint64'.\\n     */\\n    function asEuint64(ebool b) internal returns (euint64) {\\n        return euint64.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'ebool'.\\n     */\\n    function asEbool(euint64 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'euint128'.\\n     */\\n    function asEuint128(euint8 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'euint128'.\\n     */\\n    function asEuint128(euint16 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'euint128'.\\n     */\\n    function asEuint128(euint32 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'euint128'.\\n     */\\n    function asEuint128(euint64 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'euint128'.\\n     */\\n    function asEuint128(euint256 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(euint256.unwrap(value), FheType.Uint128));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint128'.\\n     */\\n    function asEuint128(ebool b) internal returns (euint128) {\\n        return euint128.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'ebool'.\\n     */\\n    function asEbool(euint128 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint8' to 'euint256'.\\n     */\\n    function asEuint256(euint8 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint8.unwrap(value), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint16' to 'euint256'.\\n     */\\n    function asEuint256(euint16 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint16.unwrap(value), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint32' to 'euint256'.\\n     */\\n    function asEuint256(euint32 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint32.unwrap(value), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint64' to 'euint256'.\\n     */\\n    function asEuint256(euint64 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint64.unwrap(value), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint128' to 'euint256'.\\n     */\\n    function asEuint256(euint128 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(euint128.unwrap(value), FheType.Uint256));\\n    }\\n\\n    /**\\n    /** \\n     * @dev Converts an 'ebool' to an 'euint256'.\\n     */\\n    function asEuint256(ebool b) internal returns (euint256) {\\n        return euint256.wrap(Impl.cast(ebool.unwrap(b), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Casts an encrypted integer from 'euint256' to 'ebool'.\\n     */\\n    function asEbool(euint256 value) internal returns (ebool) {\\n        return ne(value, 0);\\n    }\\n\\n    /**\\n     * @dev Evaluates not(ebool value) and returns the result.\\n     */\\n    function not(ebool value) internal returns (ebool) {\\n        return ebool.wrap(Impl.not(ebool.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint8 value) and returns the result.\\n     */\\n    function neg(euint8 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.neg(euint8.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint8 value) and returns the result.\\n     */\\n    function not(euint8 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.not(euint8.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint16 value) and returns the result.\\n     */\\n    function neg(euint16 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.neg(euint16.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint16 value) and returns the result.\\n     */\\n    function not(euint16 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.not(euint16.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint32 value) and returns the result.\\n     */\\n    function neg(euint32 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.neg(euint32.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint32 value) and returns the result.\\n     */\\n    function not(euint32 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.not(euint32.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint64 value) and returns the result.\\n     */\\n    function neg(euint64 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.neg(euint64.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint64 value) and returns the result.\\n     */\\n    function not(euint64 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.not(euint64.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint128 value) and returns the result.\\n     */\\n    function neg(euint128 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.neg(euint128.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint128 value) and returns the result.\\n     */\\n    function not(euint128 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.not(euint128.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates neg(euint256 value) and returns the result.\\n     */\\n    function neg(euint256 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.neg(euint256.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Evaluates not(euint256 value) and returns the result.\\n     */\\n    function not(euint256 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.not(euint256.unwrap(value)));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted ebool integer.\\n     */\\n    function fromExternal(externalEbool inputHandle, bytes memory inputProof) internal returns (ebool) {\\n        return ebool.wrap(Impl.verify(externalEbool.unwrap(inputHandle), inputProof, FheType.Bool));\\n    }\\n\\n    /**\\n     * @dev Converts a plaintext boolean to an encrypted boolean.\\n     */\\n    function asEbool(bool value) internal returns (ebool) {\\n        return ebool.wrap(Impl.trivialEncrypt(value ? 1 : 0, FheType.Bool));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint8 integer.\\n     */\\n    function fromExternal(externalEuint8 inputHandle, bytes memory inputProof) internal returns (euint8) {\\n        return euint8.wrap(Impl.verify(externalEuint8.unwrap(inputHandle), inputProof, FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint8 integer.\\n     */\\n    function asEuint8(uint8 value) internal returns (euint8) {\\n        return euint8.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint16 integer.\\n     */\\n    function fromExternal(externalEuint16 inputHandle, bytes memory inputProof) internal returns (euint16) {\\n        return euint16.wrap(Impl.verify(externalEuint16.unwrap(inputHandle), inputProof, FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint16 integer.\\n     */\\n    function asEuint16(uint16 value) internal returns (euint16) {\\n        return euint16.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint32 integer.\\n     */\\n    function fromExternal(externalEuint32 inputHandle, bytes memory inputProof) internal returns (euint32) {\\n        return euint32.wrap(Impl.verify(externalEuint32.unwrap(inputHandle), inputProof, FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint32 integer.\\n     */\\n    function asEuint32(uint32 value) internal returns (euint32) {\\n        return euint32.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint64 integer.\\n     */\\n    function fromExternal(externalEuint64 inputHandle, bytes memory inputProof) internal returns (euint64) {\\n        return euint64.wrap(Impl.verify(externalEuint64.unwrap(inputHandle), inputProof, FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint64 integer.\\n     */\\n    function asEuint64(uint64 value) internal returns (euint64) {\\n        return euint64.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint128 integer.\\n     */\\n    function fromExternal(externalEuint128 inputHandle, bytes memory inputProof) internal returns (euint128) {\\n        return euint128.wrap(Impl.verify(externalEuint128.unwrap(inputHandle), inputProof, FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint128 integer.\\n     */\\n    function asEuint128(uint128 value) internal returns (euint128) {\\n        return euint128.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted eaddress integer.\\n     */\\n    function fromExternal(externalEaddress inputHandle, bytes memory inputProof) internal returns (eaddress) {\\n        return eaddress.wrap(Impl.verify(externalEaddress.unwrap(inputHandle), inputProof, FheType.Uint160));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted eaddress integer.\\n     */\\n    function asEaddress(address value) internal returns (eaddress) {\\n        return eaddress.wrap(Impl.trivialEncrypt(uint256(uint160(value)), FheType.Uint160));\\n    }\\n\\n    /**\\n     * @dev Convert an inputHandle with corresponding inputProof to an encrypted euint256 integer.\\n     */\\n    function fromExternal(externalEuint256 inputHandle, bytes memory inputProof) internal returns (euint256) {\\n        return euint256.wrap(Impl.verify(externalEuint256.unwrap(inputHandle), inputProof, FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Convert a plaintext value to an encrypted euint256 integer.\\n     */\\n    function asEuint256(uint256 value) internal returns (euint256) {\\n        return euint256.wrap(Impl.trivialEncrypt(uint256(value), FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEbool() internal returns (ebool) {\\n        return ebool.wrap(Impl.rand(FheType.Bool));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint8() internal returns (euint8) {\\n        return euint8.wrap(Impl.rand(FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 8-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint8(uint8 upperBound) internal returns (euint8) {\\n        return euint8.wrap(Impl.randBounded(upperBound, FheType.Uint8));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint16() internal returns (euint16) {\\n        return euint16.wrap(Impl.rand(FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 16-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint16(uint16 upperBound) internal returns (euint16) {\\n        return euint16.wrap(Impl.randBounded(upperBound, FheType.Uint16));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint32() internal returns (euint32) {\\n        return euint32.wrap(Impl.rand(FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 32-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint32(uint32 upperBound) internal returns (euint32) {\\n        return euint32.wrap(Impl.randBounded(upperBound, FheType.Uint32));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint64() internal returns (euint64) {\\n        return euint64.wrap(Impl.rand(FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 64-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint64(uint64 upperBound) internal returns (euint64) {\\n        return euint64.wrap(Impl.randBounded(upperBound, FheType.Uint64));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint128() internal returns (euint128) {\\n        return euint128.wrap(Impl.rand(FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 128-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint128(uint128 upperBound) internal returns (euint128) {\\n        return euint128.wrap(Impl.randBounded(upperBound, FheType.Uint128));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted value.\\n     */\\n    function randEuint256() internal returns (euint256) {\\n        return euint256.wrap(Impl.rand(FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev Generates a random encrypted 256-bit unsigned integer in the [0, upperBound) range.\\n     *      The upperBound must be a power of 2.\\n     */\\n    function randEuint256(uint256 upperBound) internal returns (euint256) {\\n        return euint256.wrap(Impl.randBounded(upperBound, FheType.Uint256));\\n    }\\n\\n    /**\\n     * @dev This function cleans the transient storage for the ACL (accounts) and the InputVerifier\\n     *      (input proofs).\\n     *      This could be useful for integration with Account Abstraction when bundling several\\n     *      UserOps calling the FHEVMExecutor.\\n     */\\n    function cleanTransientStorage() internal {\\n        Impl.cleanTransientStorageACL();\\n        Impl.cleanTransientStorageInputVerifier();\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(ebool value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(ebool.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(ebool value) internal view returns (bool) {\\n        return Impl.isAllowed(ebool.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(ebool value, address account) internal returns (ebool) {\\n        Impl.allow(ebool.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(ebool value) internal returns (ebool) {\\n        Impl.allow(ebool.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(ebool value, address account) internal returns (ebool) {\\n        Impl.allowTransient(ebool.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(ebool value) internal returns (ebool) {\\n        Impl.makePubliclyDecryptable(ebool.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(ebool value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(ebool.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint8 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint8.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint8 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint8.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint8 value, address account) internal returns (euint8) {\\n        Impl.allow(euint8.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint8 value) internal returns (euint8) {\\n        Impl.allow(euint8.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint8 value, address account) internal returns (euint8) {\\n        Impl.allowTransient(euint8.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint8 value) internal returns (euint8) {\\n        Impl.makePubliclyDecryptable(euint8.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint8 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint8.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint16 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint16.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint16 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint16.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint16 value, address account) internal returns (euint16) {\\n        Impl.allow(euint16.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint16 value) internal returns (euint16) {\\n        Impl.allow(euint16.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint16 value, address account) internal returns (euint16) {\\n        Impl.allowTransient(euint16.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint16 value) internal returns (euint16) {\\n        Impl.makePubliclyDecryptable(euint16.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint16 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint16.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint32 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint32.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint32 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint32.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint32 value, address account) internal returns (euint32) {\\n        Impl.allow(euint32.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint32 value) internal returns (euint32) {\\n        Impl.allow(euint32.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint32 value, address account) internal returns (euint32) {\\n        Impl.allowTransient(euint32.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint32 value) internal returns (euint32) {\\n        Impl.makePubliclyDecryptable(euint32.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint32 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint32.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint64 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint64.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint64 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint64.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint64 value, address account) internal returns (euint64) {\\n        Impl.allow(euint64.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint64 value) internal returns (euint64) {\\n        Impl.allow(euint64.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint64 value, address account) internal returns (euint64) {\\n        Impl.allowTransient(euint64.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint64 value) internal returns (euint64) {\\n        Impl.makePubliclyDecryptable(euint64.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint64 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint64.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint128 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint128.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint128 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint128.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint128 value, address account) internal returns (euint128) {\\n        Impl.allow(euint128.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint128 value) internal returns (euint128) {\\n        Impl.allow(euint128.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint128 value, address account) internal returns (euint128) {\\n        Impl.allowTransient(euint128.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint128 value) internal returns (euint128) {\\n        Impl.makePubliclyDecryptable(euint128.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint128 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint128.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(eaddress value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(eaddress.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(eaddress value) internal view returns (bool) {\\n        return Impl.isAllowed(eaddress.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(eaddress value, address account) internal returns (eaddress) {\\n        Impl.allow(eaddress.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(eaddress value) internal returns (eaddress) {\\n        Impl.allow(eaddress.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(eaddress value, address account) internal returns (eaddress) {\\n        Impl.allowTransient(eaddress.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(eaddress value) internal returns (eaddress) {\\n        Impl.makePubliclyDecryptable(eaddress.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(eaddress value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(eaddress.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Returns whether the account is allowed to use the value.\\n     */\\n    function isAllowed(euint256 value, address account) internal view returns (bool) {\\n        return Impl.isAllowed(euint256.unwrap(value), account);\\n    }\\n\\n    /**\\n     * @dev Returns whether the sender is allowed to use the value.\\n     */\\n    function isSenderAllowed(euint256 value) internal view returns (bool) {\\n        return Impl.isAllowed(euint256.unwrap(value), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for the address account.\\n     */\\n    function allow(euint256 value, address account) internal returns (euint256) {\\n        Impl.allow(euint256.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value for this address (address(this)).\\n     */\\n    function allowThis(euint256 value) internal returns (euint256) {\\n        Impl.allow(euint256.unwrap(value), address(this));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Allows the use of value by address account for this transaction.\\n     */\\n    function allowTransient(euint256 value, address account) internal returns (euint256) {\\n        Impl.allowTransient(euint256.unwrap(value), account);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Makes the value publicly decryptable.\\n     */\\n    function makePubliclyDecryptable(euint256 value) internal returns (euint256) {\\n        Impl.makePubliclyDecryptable(euint256.unwrap(value));\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns whether the the value is publicly decryptable.\\n     */\\n    function isPubliclyDecryptable(euint256 value) internal view returns (bool) {\\n        return Impl.isPubliclyDecryptable(euint256.unwrap(value));\\n    }\\n\\n    /**\\n     * @dev Recovers the stored array of handles corresponding to requestID.\\n     */\\n    function loadRequestedHandles(uint256 requestID) internal view returns (bytes32[] memory) {\\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\\n        if ($.requestedHandles[requestID].length == 0) {\\n            revert NoHandleFoundForRequestID();\\n        }\\n        return $.requestedHandles[requestID];\\n    }\\n\\n    /**\\n     * @dev     Calls the DecryptionOracle contract to request the decryption of a list of handles.\\n     * @notice  Also does the needed call to ACL::allowForDecryption with requested handles.\\n     */\\n    function requestDecryption(\\n        bytes32[] memory ctsHandles,\\n        bytes4 callbackSelector\\n    ) internal returns (uint256 requestID) {\\n        requestID = requestDecryption(ctsHandles, callbackSelector, 0);\\n    }\\n\\n    /**\\n     * @dev     Calls the DecryptionOracle contract to request the decryption of a list of handles, with a custom msgValue.\\n     * @notice  Also does the needed call to ACL::allowForDecryption with requested handles.\\n     */\\n    function requestDecryption(\\n        bytes32[] memory ctsHandles,\\n        bytes4 callbackSelector,\\n        uint256 msgValue\\n    ) internal returns (uint256 requestID) {\\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\\n        requestID = $.counterRequest;\\n        CoprocessorConfig storage $$ = Impl.getCoprocessorConfig();\\n        IACL($$.ACLAddress).allowForDecryption(ctsHandles);\\n        IDecryptionOracle($$.DecryptionOracleAddress).requestDecryption{value: msgValue}(\\n            requestID,\\n            ctsHandles,\\n            callbackSelector\\n        );\\n        saveRequestedHandles(requestID, ctsHandles);\\n        $.counterRequest++;\\n    }\\n\\n    /**\\n     * @dev     MUST be called inside the callback function the dApp contract to verify the signatures,\\n     * @dev     otherwise fake decryption results could be submitted.\\n     * @notice  Warning: MUST be called directly in the callback function called by the relayer.\\n     */\\n    function checkSignatures(uint256 requestID, bytes memory cleartexts, bytes memory decryptionProof) internal {\\n        bytes32[] memory handlesList = loadRequestedHandles(requestID);\\n        bool isVerified = verifySignatures(handlesList, cleartexts, decryptionProof);\\n        if (!isVerified) {\\n            revert InvalidKMSSignatures();\\n        }\\n        emit DecryptionFulfilled(requestID);\\n    }\\n\\n    /**\\n     * @dev Private low-level function used to link in storage an array of handles to its associated requestID.\\n     */\\n    function saveRequestedHandles(uint256 requestID, bytes32[] memory handlesList) private {\\n        DecryptionRequests storage $ = Impl.getDecryptionRequests();\\n        if ($.requestedHandles[requestID].length != 0) {\\n            revert HandlesAlreadySavedForRequestID();\\n        }\\n        $.requestedHandles[requestID] = handlesList;\\n    }\\n\\n    /**\\n     * @dev Private low-level function used to extract the decryptedResult bytes array and verify the KMS signatures.\\n     * @notice  Warning: MUST be called directly in the callback function called by the relayer.\\n     * @dev The callback function has the following signature:\\n     * - requestID (static uint256)\\n     * - cleartexts (dynamic bytes)\\n     * - decryptionProof (dynamic bytes)\\n     *\\n     * This means that the calldata is encoded in the following way:\\n     * - 4 bytes: selector\\n     * - 32 bytes: requestID\\n     * - 32 bytes: offset of the cleartexts\\n     * - 32 bytes: offset of the decryptionProof\\n     * - 32 bytes: length of the cleartexts (total number of bytes)\\n     * - n*32 bytes: the \\\"n\\\" cleartext values, with \\\"n\\\" the number of handles\\n     * - 32 bytes: length of the decryptionProof (total number of bytes)\\n     * - ... the data of the decryptionProof (signatures, extra data)\\n     */\\n    function verifySignatures(\\n        bytes32[] memory handlesList,\\n        bytes memory cleartexts,\\n        bytes memory decryptionProof\\n    ) private returns (bool) {\\n        // Compute the signature offset\\n        // This offset is computed by considering the format encoded by the KMS when creating the\\n        // \\\"decryptedResult\\\" bytes array (see comment below), which is the following:\\n        // - requestID: 32 bytes\\n        // - all \\\"n\\\" decrypted values (which is \\\"cleartexts\\\" itself): n*32 bytes (\\\"cleartexts.length\\\" bytes)\\n        // - offset of the signatures: 32 bytes\\n        // - the rest of signature values (lengths, offsets, values)\\n        // This means the expected offset to concatenate to the \\\"decryptedResult\\\" bytes array has\\n        // the following value: 32 + n*32 + 32\\n        // See https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types for more details.\\n        // The signature offset will most likely be removed in the future,\\n        // see https://github.com/zama-ai/fhevm-internal/issues/345\\n        uint256 signaturesOffset = 32 + cleartexts.length + 32;\\n\\n        // Built the \\\"decryptedResult\\\" bytes array\\n        // Currently, the \\\"decryptedResult\\\" is encoded (by the KMS) in the following format:\\n        // - n*32 bytes: the \\\"n\\\" decrypted values, \\\"cleartexts\\\" itself\\n        // - 32 bytes: offset of the signatures, as explained above\\n        // This is equivalent to concatenating the cleartexts and the signatures offset, which can\\n        // be done using abi.encoded in a gas efficient way.\\n        // The signature offset will most likely be removed in the future,\\n        // see https://github.com/zama-ai/fhevm-internal/issues/345\\n        // Here we can use \\\"encodePacked\\\" instead of \\\"abi.encode\\\" to save gas, as the cleartexts\\n        // and the signaturesOffset are already 32 bytes aligned (ie, no padding needed).\\n        bytes memory decryptedResult = abi.encodePacked(cleartexts, signaturesOffset);\\n\\n        CoprocessorConfig storage $ = Impl.getCoprocessorConfig();\\n        return\\n            IKMSVerifier($.KMSVerifierAddress).verifyDecryptionEIP712KMSSignatures(\\n                handlesList,\\n                decryptedResult,\\n                decryptionProof\\n            );\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(ebool value) internal pure returns (bytes32 ct) {\\n        ct = ebool.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint8 value) internal pure returns (bytes32 ct) {\\n        ct = euint8.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint16 value) internal pure returns (bytes32 ct) {\\n        ct = euint16.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint32 value) internal pure returns (bytes32 ct) {\\n        ct = euint32.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint64 value) internal pure returns (bytes32 ct) {\\n        ct = euint64.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint128 value) internal pure returns (bytes32 ct) {\\n        ct = euint128.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(eaddress value) internal pure returns (bytes32 ct) {\\n        ct = eaddress.unwrap(value);\\n    }\\n\\n    /**\\n     * @dev Converts handle from its custom type to the underlying bytes32. Used when requesting a decryption.\\n     */\\n    function toBytes32(euint256 value) internal pure returns (bytes32 ct) {\\n        ct = euint256.unwrap(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7a7b1c85bbef1ad02125f11af2f1c009ab6549075ab8d51d31ae9352f0441f35\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhevm/solidity/lib/FheType.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\npragma solidity ^0.8.24;\\n\\nenum FheType {\\n    Bool,\\n    Uint4,\\n    Uint8,\\n    Uint16,\\n    Uint32,\\n    Uint64,\\n    Uint128,\\n    Uint160,\\n    Uint256,\\n    Uint512,\\n    Uint1024,\\n    Uint2048,\\n    Uint2,\\n    Uint6,\\n    Uint10,\\n    Uint12,\\n    Uint14,\\n    Int2,\\n    Int4,\\n    Int6,\\n    Int8,\\n    Int10,\\n    Int12,\\n    Int14,\\n    Int16,\\n    Int32,\\n    Int64,\\n    Int128,\\n    Int160,\\n    Int256,\\n    AsciiString,\\n    Int512,\\n    Int1024,\\n    Int2048,\\n    Uint24,\\n    Uint40,\\n    Uint48,\\n    Uint56,\\n    Uint72,\\n    Uint80,\\n    Uint88,\\n    Uint96,\\n    Uint104,\\n    Uint112,\\n    Uint120,\\n    Uint136,\\n    Uint144,\\n    Uint152,\\n    Uint168,\\n    Uint176,\\n    Uint184,\\n    Uint192,\\n    Uint200,\\n    Uint208,\\n    Uint216,\\n    Uint224,\\n    Uint232,\\n    Uint240,\\n    Uint248,\\n    Int24,\\n    Int40,\\n    Int48,\\n    Int56,\\n    Int72,\\n    Int80,\\n    Int88,\\n    Int96,\\n    Int104,\\n    Int112,\\n    Int120,\\n    Int136,\\n    Int144,\\n    Int152,\\n    Int168,\\n    Int176,\\n    Int184,\\n    Int192,\\n    Int200,\\n    Int208,\\n    Int216,\\n    Int224,\\n    Int232,\\n    Int240,\\n    Int248\\n}\\n\",\"keccak256\":\"0x945f006108fab92cb082a6e5a80525953f17b8d8dcf88a283a83fc80c765497a\",\"license\":\"BSD-3-Clause-Clear\"},\"@fhevm/solidity/lib/Impl.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\npragma solidity ^0.8.24;\\n\\nimport {FheType} from \\\"./FheType.sol\\\";\\n\\n/**\\n * @title   CoprocessorConfig\\n * @notice  This struct contains all addresses of core contracts, which are needed in a typical dApp.\\n */\\nstruct CoprocessorConfig {\\n    address ACLAddress;\\n    address CoprocessorAddress;\\n    address DecryptionOracleAddress;\\n    address KMSVerifierAddress;\\n}\\n\\n/**\\n * @title   DecryptionRequests\\n * @notice  This struct contains the internal counter for requestIDs generated by the dapp,\\n *          and the mapping from internal requestIDs to list of handles requested for decryption.\\n */\\nstruct DecryptionRequests {\\n    uint256 counterRequest;\\n    mapping(uint256 => bytes32[]) requestedHandles;\\n}\\n\\n/**\\n * @title   IFHEVMExecutor\\n * @notice  This interface contains all functions to conduct FHE operations.\\n */\\ninterface IFHEVMExecutor {\\n    /**\\n     * @notice              Computes fheAdd operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheAdd(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheSub operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheSub(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheMul operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheMul(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheDiv operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheDiv(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheRem operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheRem(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheBitAnd operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheBitAnd(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheBitOr operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheBitOr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheBitXor operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheBitXor(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheShl operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheShl(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheShr operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheShr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheRotl operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheRotl(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheRotr operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheRotr(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheEq operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheEq(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheNe operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheNe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheGe operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheGe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheGt operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheGt(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheLe operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheLe(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheLt operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheLt(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheMin operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheMin(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheMax operation.\\n     * @param lhs           LHS.\\n     * @param rhs           RHS.\\n     * @param scalarByte    Scalar byte.\\n     * @return result       Result.\\n     */\\n    function fheMax(bytes32 lhs, bytes32 rhs, bytes1 scalarByte) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheNeg operation.\\n     * @param ct            Ct\\n     * @return result       Result.\\n     */\\n    function fheNeg(bytes32 ct) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes fheNot operation.\\n     * @param ct            Ct\\n     * @return result       Result.\\n     */\\n    function fheNot(bytes32 ct) external returns (bytes32 result);\\n    /**\\n     * @notice                Verifies the ciphertext.\\n     * @param inputHandle     Input handle.\\n     * @param callerAddress   Address of the caller.\\n     * @param inputProof      Input proof.\\n     * @param inputType       Input type.\\n     * @return result         Result.\\n     */\\n    function verifyCiphertext(\\n        bytes32 inputHandle,\\n        address callerAddress,\\n        bytes memory inputProof,\\n        FheType inputType\\n    ) external returns (bytes32 result);\\n\\n    /**\\n     * @notice          Performs the casting to a target type.\\n     * @param ct        Value to cast.\\n     * @param toType    Target type.\\n     * @return result   Result value of the target type.\\n     */\\n    function cast(bytes32 ct, FheType toType) external returns (bytes32 result);\\n\\n    /**\\n     * @notice          Does trivial encryption.\\n     * @param ct        Value to encrypt.\\n     * @param toType    Target type.\\n     * @return result   Result value of the target type.\\n     */\\n    function trivialEncrypt(uint256 ct, FheType toType) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes FHEIfThenElse operation.\\n     * @param control       Control value.\\n     * @param ifTrue        If true.\\n     * @param ifFalse       If false.\\n     * @return result       Result.\\n     */\\n    function fheIfThenElse(bytes32 control, bytes32 ifTrue, bytes32 ifFalse) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes FHERand operation.\\n     * @param randType      Type for the random result.\\n     * @return result       Result.\\n     */\\n    function fheRand(FheType randType) external returns (bytes32 result);\\n\\n    /**\\n     * @notice              Computes FHERandBounded operation.\\n     * @param upperBound    Upper bound value.\\n     * @param randType      Type for the random result.\\n     * @return result       Result.\\n     */\\n    function fheRandBounded(uint256 upperBound, FheType randType) external returns (bytes32 result);\\n\\n    /**\\n     * @notice                      Returns the address of the InputVerifier contract used by the coprocessor.\\n     * @return inputVerifierAddress Address of the InputVerifier.\\n     */\\n    function getInputVerifierAddress() external view returns (address);\\n}\\n\\n/**\\n * @title   IACL.\\n * @notice  This interface contains all functions that are used to conduct operations\\n *          with the ACL contract.\\n */\\ninterface IACL {\\n    /**\\n     * @notice              Allows the use of handle by address account for this transaction.\\n     * @dev                 The caller must be allowed to use handle for allowTransient() to succeed.\\n     *                      If not, allowTransient() reverts.\\n     *                      The Coprocessor contract can always allowTransient(), contrarily to allow().\\n     * @param ciphertext    Ciphertext.\\n     * @param account       Address of the account.\\n     */\\n    function allowTransient(bytes32 ciphertext, address account) external;\\n\\n    /**\\n     * @notice              Allows the use of handle for the address account.\\n     * @dev                 The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.\\n     * @param handle        Handle.\\n     * @param account       Address of the account.\\n     */\\n    function allow(bytes32 handle, address account) external;\\n\\n    /**\\n     * @dev This function removes the transient allowances, which could be useful for integration with\\n     *      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\\n     */\\n    function cleanTransientStorage() external;\\n\\n    /**\\n     * @notice              Returns whether the account is allowed to use the handle, either due to\\n     *                      allowTransient() or allow().\\n     * @param handle        Handle.\\n     * @param account       Address of the account.\\n     * @return isAllowed    Whether the account can access the handle.\\n     */\\n    function isAllowed(bytes32 handle, address account) external view returns (bool);\\n\\n    /**\\n     * @notice              Allows a list of handles to be decrypted.\\n     * @param handlesList   List of handles.\\n     */\\n    function allowForDecryption(bytes32[] memory handlesList) external;\\n\\n    /**\\n     * @notice                  Returns wether a handle is allowed to be publicly decrypted.\\n     * @param handle            Handle.\\n     * @return isDecryptable    Whether the handle can be publicly decrypted.\\n     */\\n    function isAllowedForDecryption(bytes32 handle) external view returns (bool);\\n}\\n\\n/**\\n * @title IInputVerifier\\n * @notice This interface contains the only function required from InputVerifier.\\n */\\ninterface IInputVerifier {\\n    /**\\n     * @dev This function removes the transient allowances, which could be useful for integration with\\n     *      Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\\n     */\\n    function cleanTransientStorage() external;\\n}\\n\\n/**\\n * @title   Impl\\n * @notice  This library is the core implementation for computing FHE operations (e.g. add, sub, xor).\\n */\\nlibrary Impl {\\n    /// keccak256(abi.encode(uint256(keccak256(\\\"confidential.storage.config\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant CoprocessorConfigLocation =\\n        0x9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700;\\n\\n    /// keccak256(abi.encode(uint256(keccak256(\\\"confidential.storage.decryptionRequests\\\")) - 1)) & ~bytes32(uint256(0xff));\\n    bytes32 private constant DecryptionRequestsStorageLocation =\\n        0x878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf00;\\n\\n    /**\\n     * @dev Returns the Coprocessor config.\\n     */\\n    function getCoprocessorConfig() internal pure returns (CoprocessorConfig storage $) {\\n        assembly {\\n            $.slot := CoprocessorConfigLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the DecryptionRequests storage struct.\\n     */\\n    function getDecryptionRequests() internal pure returns (DecryptionRequests storage $) {\\n        assembly {\\n            $.slot := DecryptionRequestsStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @notice                  Sets the coprocessor addresses.\\n     * @param coprocessorConfig Coprocessor config struct that contains contract addresses.\\n     */\\n    function setCoprocessor(CoprocessorConfig memory coprocessorConfig) internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        $.ACLAddress = coprocessorConfig.ACLAddress;\\n        $.CoprocessorAddress = coprocessorConfig.CoprocessorAddress;\\n        $.DecryptionOracleAddress = coprocessorConfig.DecryptionOracleAddress;\\n        $.KMSVerifierAddress = coprocessorConfig.KMSVerifierAddress;\\n    }\\n\\n    function add(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheAdd(lhs, rhs, scalarByte);\\n    }\\n\\n    function sub(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheSub(lhs, rhs, scalarByte);\\n    }\\n\\n    function mul(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMul(lhs, rhs, scalarByte);\\n    }\\n\\n    function div(bytes32 lhs, bytes32 rhs) internal returns (bytes32 result) {\\n        bytes1 scalarByte = 0x01;\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheDiv(lhs, rhs, scalarByte);\\n    }\\n\\n    function rem(bytes32 lhs, bytes32 rhs) internal returns (bytes32 result) {\\n        bytes1 scalarByte = 0x01;\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRem(lhs, rhs, scalarByte);\\n    }\\n\\n    function and(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitAnd(lhs, rhs, scalarByte);\\n    }\\n\\n    function or(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitOr(lhs, rhs, scalarByte);\\n    }\\n\\n    function xor(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheBitXor(lhs, rhs, scalarByte);\\n    }\\n\\n    function shl(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheShl(lhs, rhs, scalarByte);\\n    }\\n\\n    function shr(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheShr(lhs, rhs, scalarByte);\\n    }\\n\\n    function rotl(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRotl(lhs, rhs, scalarByte);\\n    }\\n\\n    function rotr(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRotr(lhs, rhs, scalarByte);\\n    }\\n\\n    function eq(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheEq(lhs, rhs, scalarByte);\\n    }\\n\\n    function ne(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNe(lhs, rhs, scalarByte);\\n    }\\n\\n    function ge(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheGe(lhs, rhs, scalarByte);\\n    }\\n\\n    function gt(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheGt(lhs, rhs, scalarByte);\\n    }\\n\\n    function le(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheLe(lhs, rhs, scalarByte);\\n    }\\n\\n    function lt(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheLt(lhs, rhs, scalarByte);\\n    }\\n\\n    function min(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMin(lhs, rhs, scalarByte);\\n    }\\n\\n    function max(bytes32 lhs, bytes32 rhs, bool scalar) internal returns (bytes32 result) {\\n        bytes1 scalarByte;\\n        if (scalar) {\\n            scalarByte = 0x01;\\n        } else {\\n            scalarByte = 0x00;\\n        }\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheMax(lhs, rhs, scalarByte);\\n    }\\n\\n    function neg(bytes32 ct) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNeg(ct);\\n    }\\n\\n    function not(bytes32 ct) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheNot(ct);\\n    }\\n\\n    /**\\n     * @dev If 'control's value is 'true', the result has the same value as 'ifTrue'.\\n     *      If 'control's value is 'false', the result has the same value as 'ifFalse'.\\n     */\\n    function select(bytes32 control, bytes32 ifTrue, bytes32 ifFalse) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheIfThenElse(control, ifTrue, ifFalse);\\n    }\\n\\n    /**\\n     * @notice              Verifies the ciphertext (FHEVMExecutor) and allows transient (ACL).\\n     * @param inputHandle   Input handle.\\n     * @param inputProof    Input proof.\\n     * @param toType        Input type.\\n     * @return result       Result.\\n     */\\n    function verify(bytes32 inputHandle, bytes memory inputProof, FheType toType) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).verifyCiphertext(inputHandle, msg.sender, inputProof, toType);\\n        IACL($.ACLAddress).allowTransient(result, msg.sender);\\n    }\\n\\n    /**\\n     * @notice            Performs the casting to a target type.\\n     * @param ciphertext  Ciphertext to cast.\\n     * @param toType      Target type.\\n     * @return result     Result value of the target type.\\n     */\\n    function cast(bytes32 ciphertext, FheType toType) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).cast(ciphertext, toType);\\n    }\\n\\n    /**\\n     * @notice          Does trivial encryption.\\n     * @param value     Value to encrypt.\\n     * @param toType    Target type.\\n     * @return result   Result value of the target type.\\n     */\\n    function trivialEncrypt(uint256 value, FheType toType) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).trivialEncrypt(value, toType);\\n    }\\n\\n    function rand(FheType randType) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRand(randType);\\n    }\\n\\n    function randBounded(uint256 upperBound, FheType randType) internal returns (bytes32 result) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        result = IFHEVMExecutor($.CoprocessorAddress).fheRandBounded(upperBound, randType);\\n    }\\n\\n    /**\\n     * @notice              Allows the use of handle by address account for this transaction.\\n     * @dev                 The caller must be allowed to use handle for allowTransient() to succeed.\\n     *                      If not, allowTransient() reverts.\\n     *                      The Coprocessor contract can always allowTransient(), contrarily to allow().\\n     * @param handle        Handle.\\n     * @param account       Address of the account.\\n     */\\n    function allowTransient(bytes32 handle, address account) internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        IACL($.ACLAddress).allowTransient(handle, account);\\n    }\\n\\n    /**\\n     * @notice              Allows the use of handle for the address account.\\n     * @dev                 The caller must be allowed to use handle for allow() to succeed. If not, allow() reverts.\\n     * @param handle        Handle.\\n     * @param account       Address of the account.\\n     */\\n    function allow(bytes32 handle, address account) internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        IACL($.ACLAddress).allow(handle, account);\\n    }\\n\\n    /**\\n     * @notice              Allows the handle to be publicly decryptable.\\n     * @dev                 The caller must be allowed to use handle for makePubliclyDecryptable() to succeed.\\n     *                      If not, makePubliclyDecryptable() reverts.\\n     * @param handle        Handle.\\n     */\\n    function makePubliclyDecryptable(bytes32 handle) internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        bytes32[] memory handleArray = new bytes32[](1);\\n        handleArray[0] = handle;\\n        IACL($.ACLAddress).allowForDecryption(handleArray);\\n    }\\n\\n    /**\\n     * @dev This function removes the transient allowances in the ACL, which could be useful for integration\\n     *      with Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\\n     */\\n    function cleanTransientStorageACL() internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        IACL($.ACLAddress).cleanTransientStorage();\\n    }\\n\\n    /**\\n     * @dev This function removes the transient proofs in the InputVerifier, which could be useful for integration\\n     *      with Account Abstraction when bundling several UserOps calling the FHEVMExecutor Coprocessor.\\n     */\\n    function cleanTransientStorageInputVerifier() internal {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        address inputVerifierAddress = IFHEVMExecutor($.CoprocessorAddress).getInputVerifierAddress();\\n        IInputVerifier(inputVerifierAddress).cleanTransientStorage();\\n    }\\n\\n    /**\\n     * @notice              Returns whether the account is allowed to use the handle, either due to\\n     *                      allowTransient() or allow().\\n     * @param handle        Handle.\\n     * @param account       Address of the account.\\n     * @return isAllowed    Whether the account can access the handle.\\n     */\\n    function isAllowed(bytes32 handle, address account) internal view returns (bool) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        return IACL($.ACLAddress).isAllowed(handle, account);\\n    }\\n\\n    /**\\n     * @notice              Returns whether the handle is allowed to be publicly decrypted.\\n     * @param handle        Handle.\\n     * @return isAllowed    Whether the handle can be publicly decrypted.\\n     */\\n    function isPubliclyDecryptable(bytes32 handle) internal view returns (bool) {\\n        CoprocessorConfig storage $ = getCoprocessorConfig();\\n        return IACL($.ACLAddress).isAllowedForDecryption(handle);\\n    }\\n}\\n\",\"keccak256\":\"0xac25fa2fb870877e0079d8a08e064fcc2b87ff7ce956e11c9a920fc70d82859c\",\"license\":\"BSD-3-Clause-Clear\"},\"@zama-fhe/oracle-solidity/address/ZamaOracleAddress.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause-Clear\\n\\npragma solidity ^0.8.24;\\n\\naddress constant SepoliaZamaOracleAddress = 0xa02Cda4Ca3a71D7C46997716F4283aa851C28812;\\n\",\"keccak256\":\"0x1e1117254b0e777ecbb902f3b9bb7d0b10920b7896e5eaa62b5163046685b28b\",\"license\":\"BSD-3-Clause-Clear\"},\"contracts/ChildGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {FHE, euint32, externalEuint32} from \\\"@fhevm/solidity/lib/FHE.sol\\\";\\nimport {SepoliaConfig} from \\\"@fhevm/solidity/config/ZamaConfig.sol\\\";\\n\\n/// @title ChildGuard \\u2013 \\u513f\\u7ae5\\u4fdd\\u62a4\\u884c\\u52a8\\u5b58\\u8bc1\\uff08FHE \\u589e\\u5f3a\\uff09\\n/// @notice \\u4f7f\\u7528 FHE \\u5bf9\\u652f\\u6301\\u8ba1\\u6570\\u8fdb\\u884c\\u52a0\\u5bc6\\u5b58\\u50a8\\uff0c\\u516c\\u5f00\\u67e5\\u8be2\\u8fd4\\u56de\\u5bc6\\u6587\\u53e5\\u67c4\\uff0c\\u89e3\\u5bc6\\u987b\\u7ecf\\u6388\\u6743\\ncontract ChildGuard is SepoliaConfig {\\n    struct ActionRecord {\\n        uint256 id;\\n        address submitter;\\n        string title;\\n        string descriptionHash; // IPFS CID\\uff08\\u52a0\\u5bc6\\u540e\\uff09\\n        string region;\\n        string date;\\n        uint256 timestamp;\\n        euint32 supportCountEnc; // \\u52a0\\u5bc6\\u7684\\u652f\\u6301\\u8ba1\\u6570\\n    }\\n\\n    mapping(uint256 => ActionRecord) public records;\\n    mapping(uint256 => mapping(address => bool)) public supported; // \\u70b9\\u8d5e\\u53bb\\u91cd\\n    // \\u7edf\\u8ba1\\n    uint256 public totalSupports;\\n    mapping(bytes32 => uint256) public regionCounts; // \\u5730\\u533a -> \\u63d0\\u4ea4\\u6570\\u91cf\\n    mapping(address => uint256) public submitCount; // \\u7528\\u6237\\u63d0\\u4ea4\\u6b21\\u6570\\n    mapping(address => uint256) public supportGivenCount; // \\u7528\\u6237\\u70b9\\u8d5e\\u6b21\\u6570\\n    mapping(address => uint256) public supportReceivedCount; // \\u7528\\u6237\\u88ab\\u70b9\\u8d5e\\u6b21\\u6570\\uff08\\u5176\\u8bb0\\u5f55\\u6536\\u5230\\u7684\\u603b\\u70b9\\u8d5e\\uff09\\n    // \\u8282\\u6d41/\\u98ce\\u63a7\\n    uint256 public constant SUBMIT_COOLDOWN = 10 minutes;\\n    uint256 public constant SUPPORT_DAILY_LIMIT = 50;\\n    mapping(address => uint256) public lastSubmitAt;\\n    mapping(address => mapping(uint256 => uint256)) public supportsPerDay; // user => day => count\\n    // \\u52cb\\u7ae0\\n    address public badgeContract; // GuardBadge \\u5408\\u7ea6\\u5730\\u5740\\uff08\\u53ef\\u9009\\uff09\\n    mapping(uint256 => mapping(address => bool)) public badgeClaimed; // badgeId => user => claimed\\n\\n    // \\u52cb\\u7ae0\\u9608\\u503c\\n    uint256 public constant BADGE1_TARGET = 1; // \\u9996\\u6b21\\u63d0\\u4ea4\\n    uint256 public constant BADGE2_TARGET = 10; // \\u6536\\u523010\\u6b21\\u652f\\u6301\\n    uint256 public constant BADGE3_TARGET = 10; // \\u70b9\\u8d5e10\\u6b21\\n    uint256 public totalRecords;\\n\\n    event ActionSubmitted(address indexed submitter, uint256 indexed id);\\n    event ActionSupported(uint256 indexed id, address indexed supporter);\\n    event BadgeMintRequested(address indexed to, uint256 indexed badgeId);\\n    event BadgeClaimed(address indexed to, uint256 indexed badgeId);\\n\\n    /// @notice \\u63d0\\u4ea4\\u884c\\u52a8\\uff08\\u652f\\u6301\\u8ba1\\u6570\\u521d\\u59cb\\u5316\\u4e3a 0 \\u7684\\u5bc6\\u6587\\uff09\\n    function submitAction(\\n        string memory title,\\n        string memory descriptionHash,\\n        string memory region,\\n        string memory date\\n    ) external {\\n        // \\u51b7\\u5374\\n        require(block.timestamp - lastSubmitAt[msg.sender] >= SUBMIT_COOLDOWN, \\\"submit cooldown\\\");\\n        lastSubmitAt[msg.sender] = block.timestamp;\\n        uint256 id = ++totalRecords;\\n\\n        // \\u521d\\u59cb\\u5316\\u5bc6\\u6587 0\\n        euint32 zero = FHE.asEuint32(0);\\n\\n        records[id] = ActionRecord({\\n            id: id,\\n            submitter: msg.sender,\\n            title: title,\\n            descriptionHash: descriptionHash,\\n            region: region,\\n            date: date,\\n            timestamp: block.timestamp,\\n            supportCountEnc: zero\\n        });\\n\\n        // \\u6388\\u6743\\u672c\\u5408\\u7ea6\\u4e0e\\u63d0\\u4ea4\\u8005\\u53ef\\u8bfb\\u53d6\\u5bc6\\u6587\\uff08\\u65b9\\u4fbf\\u540e\\u7eed\\u6388\\u6743\\u6269\\u5c55\\uff09\\n        FHE.allowThis(records[id].supportCountEnc);\\n        FHE.allow(records[id].supportCountEnc, msg.sender);\\n\\n        emit ActionSubmitted(msg.sender, id);\\n\\n        // \\u7edf\\u8ba1\\n        regionCounts[keccak256(bytes(region))] += 1;\\n        submitCount[msg.sender] += 1;\\n\\n        // \\u52cb\\u7ae0\\uff1a\\u9996\\u6b21\\u63d0\\u4ea4\\n        if (badgeContract != address(0)) {\\n            // \\u7531\\u524d\\u7aef\\u6216\\u8fd0\\u8425\\u624b\\u52a8\\u76d1\\u542c\\u4e8b\\u4ef6\\u540e\\u94f8\\u9020\\uff1b\\u6216\\u8fd9\\u91cc\\u76f4\\u63a5\\u53d1\\u4e8b\\u4ef6\\u8bf7\\u6c42\\n            emit BadgeMintRequested(msg.sender, 1);\\n        }\\n    }\\n\\n    /// @notice \\u70b9\\u8d5e\\u652f\\u6301\\uff08\\u6bcf\\u5730\\u5740\\u5bf9\\u540c\\u4e00 id \\u4ec5\\u4e00\\u6b21\\uff09\\uff0c\\u4f20\\u5165\\u52a0\\u5bc6\\u589e\\u91cf\\uff08\\u901a\\u5e38\\u4e3a 1\\uff09\\n    /// @param recordId \\u8bb0\\u5f55 id\\n    /// @param incEnc \\u5916\\u90e8\\u52a0\\u5bc6\\u589e\\u91cf\\uff08e.g. 1\\uff09\\n    /// @param inputProof \\u8f93\\u5165\\u8bc1\\u660e\\n    function supportAction(\\n        uint256 recordId,\\n        externalEuint32 incEnc,\\n        bytes calldata inputProof\\n    ) external {\\n        ActionRecord storage r = records[recordId];\\n        require(r.submitter != address(0), \\\"Record not found\\\");\\n        require(!supported[recordId][msg.sender], \\\"Already supported\\\");\\n\\n        // \\u6bcf\\u65e5\\u4e0a\\u9650\\n        uint256 day = block.timestamp / 1 days;\\n        require(supportsPerDay[msg.sender][day] < SUPPORT_DAILY_LIMIT, \\\"daily support limit\\\");\\n\\n        // \\u89e3\\u5c01\\u5916\\u90e8\\u5bc6\\u6587\\n        euint32 inc = FHE.fromExternal(incEnc, inputProof);\\n\\n        // \\u8ba1\\u6570 += inc\\n        r.supportCountEnc = FHE.add(r.supportCountEnc, inc);\\n\\n        // \\u5141\\u8bb8\\u672c\\u5408\\u7ea6\\u4e0e\\u63d0\\u4ea4\\u8005\\u3001\\u70b9\\u8d5e\\u8005\\u8bfb\\u53d6\\u6700\\u65b0\\u8ba1\\u6570\\uff08\\u53ef\\u6309\\u9700\\u653e\\u5f00\\uff09\\n        FHE.allowThis(r.supportCountEnc);\\n        FHE.allow(r.supportCountEnc, r.submitter);\\n        FHE.allow(r.supportCountEnc, msg.sender);\\n\\n        supported[recordId][msg.sender] = true;\\n        supportsPerDay[msg.sender][day] += 1;\\n        totalSupports += 1;\\n        supportGivenCount[msg.sender] += 1;\\n        supportReceivedCount[r.submitter] += 1;\\n        emit ActionSupported(recordId, msg.sender);\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u5355\\u6761\\u8bb0\\u5f55\\uff08\\u5305\\u542b\\u5bc6\\u6587\\u652f\\u6301\\u8ba1\\u6570\\u53e5\\u67c4\\uff09\\n    function getAction(uint256 recordId)\\n        external\\n        view\\n        returns (\\n            ActionRecord memory\\n        )\\n    {\\n        require(records[recordId].submitter != address(0), \\\"Record not found\\\");\\n        return records[recordId];\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u4e00\\u9875\\u8bb0\\u5f55\\uff08\\u5206\\u9875\\uff0c\\u907f\\u514d getAllActions \\u8fc7\\u5927\\uff09\\n    function getActions(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (ActionRecord[] memory)\\n    {\\n        if (offset >= totalRecords) return new ActionRecord[](0);\\n        uint256 end = offset + limit;\\n        if (end > totalRecords) end = totalRecords;\\n        uint256 n = end - offset;\\n        ActionRecord[] memory page = new ActionRecord[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            page[i] = records[offset + 1 + i];\\n        }\\n        return page;\\n    }\\n\\n    function setBadgeContract(address c) external {\\n        // \\u7b80\\u5316\\uff1a\\u90e8\\u7f72\\u8005\\u5373 msg.sender\\uff0c\\u5728\\u751f\\u4ea7\\u53ef\\u52a0 Ownable\\n        require(badgeContract == address(0) || msg.sender == tx.origin, \\\"for demo\\\");\\n        badgeContract = c;\\n    }\\n\\n    function isEligible(address user, uint256 badgeId) public view returns (bool eligible, uint256 progress, uint256 target) {\\n        if (badgeId == 1) {\\n            progress = submitCount[user];\\n            target = BADGE1_TARGET;\\n            eligible = progress >= target;\\n        } else if (badgeId == 2) {\\n            progress = supportReceivedCount[user];\\n            target = BADGE2_TARGET;\\n            eligible = progress >= target;\\n        } else if (badgeId == 3) {\\n            progress = supportGivenCount[user];\\n            target = BADGE3_TARGET;\\n            eligible = progress >= target;\\n        }\\n    }\\n\\n    function claimBadge(uint256 badgeId) external {\\n        require(badgeContract != address(0), \\\"badge not set\\\");\\n        require(!badgeClaimed[badgeId][msg.sender], \\\"already claimed\\\");\\n        (bool ok,,) = isEligible(msg.sender, badgeId);\\n        require(ok, \\\"not eligible\\\");\\n        // mint 1 badge\\n        (bool success, ) = badgeContract.call(abi.encodeWithSignature(\\\"mint(address,uint256,uint256)\\\", msg.sender, badgeId, 1));\\n        require(success, \\\"mint failed\\\");\\n        badgeClaimed[badgeId][msg.sender] = true;\\n        emit BadgeClaimed(msg.sender, badgeId);\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x6d0019817fb1196ef5629f43abbe0a0cf040a7ae672823dd4a0ff4e1a24d2e83\",\"license\":\"MIT\"},\"encrypted-types/EncryptedTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ntype ebool is bytes32;\\n\\ntype euint8 is bytes32;\\ntype euint16 is bytes32;\\ntype euint24 is bytes32;\\ntype euint32 is bytes32;\\ntype euint40 is bytes32;\\ntype euint48 is bytes32;\\ntype euint56 is bytes32;\\ntype euint64 is bytes32;\\ntype euint72 is bytes32;\\ntype euint80 is bytes32;\\ntype euint88 is bytes32;\\ntype euint96 is bytes32;\\ntype euint104 is bytes32;\\ntype euint112 is bytes32;\\ntype euint120 is bytes32;\\ntype euint128 is bytes32;\\ntype euint136 is bytes32;\\ntype euint144 is bytes32;\\ntype euint152 is bytes32;\\ntype euint160 is bytes32;\\ntype euint168 is bytes32;\\ntype euint176 is bytes32;\\ntype euint184 is bytes32;\\ntype euint192 is bytes32;\\ntype euint200 is bytes32;\\ntype euint208 is bytes32;\\ntype euint216 is bytes32;\\ntype euint224 is bytes32;\\ntype euint232 is bytes32;\\ntype euint240 is bytes32;\\ntype euint248 is bytes32;\\ntype euint256 is bytes32;\\n\\ntype eint8 is bytes32;\\ntype eint16 is bytes32;\\ntype eint24 is bytes32;\\ntype eint32 is bytes32;\\ntype eint40 is bytes32;\\ntype eint48 is bytes32;\\ntype eint56 is bytes32;\\ntype eint64 is bytes32;\\ntype eint72 is bytes32;\\ntype eint80 is bytes32;\\ntype eint88 is bytes32;\\ntype eint96 is bytes32;\\ntype eint104 is bytes32;\\ntype eint112 is bytes32;\\ntype eint120 is bytes32;\\ntype eint128 is bytes32;\\ntype eint136 is bytes32;\\ntype eint144 is bytes32;\\ntype eint152 is bytes32;\\ntype eint160 is bytes32;\\ntype eint168 is bytes32;\\ntype eint176 is bytes32;\\ntype eint184 is bytes32;\\ntype eint192 is bytes32;\\ntype eint200 is bytes32;\\ntype eint208 is bytes32;\\ntype eint216 is bytes32;\\ntype eint224 is bytes32;\\ntype eint232 is bytes32;\\ntype eint240 is bytes32;\\ntype eint248 is bytes32;\\ntype eint256 is bytes32;\\n\\ntype eaddress is bytes32;\\n\\ntype ebytes1 is bytes32;\\ntype ebytes2 is bytes32;\\ntype ebytes3 is bytes32;\\ntype ebytes4 is bytes32;\\ntype ebytes5 is bytes32;\\ntype ebytes6 is bytes32;\\ntype ebytes7 is bytes32;\\ntype ebytes8 is bytes32;\\ntype ebytes9 is bytes32;\\ntype ebytes10 is bytes32;\\ntype ebytes11 is bytes32;\\ntype ebytes12 is bytes32;\\ntype ebytes13 is bytes32;\\ntype ebytes14 is bytes32;\\ntype ebytes15 is bytes32;\\ntype ebytes16 is bytes32;\\ntype ebytes17 is bytes32;\\ntype ebytes18 is bytes32;\\ntype ebytes19 is bytes32;\\ntype ebytes20 is bytes32;\\ntype ebytes21 is bytes32;\\ntype ebytes22 is bytes32;\\ntype ebytes23 is bytes32;\\ntype ebytes24 is bytes32;\\ntype ebytes25 is bytes32;\\ntype ebytes26 is bytes32;\\ntype ebytes27 is bytes32;\\ntype ebytes28 is bytes32;\\ntype ebytes29 is bytes32;\\ntype ebytes30 is bytes32;\\ntype ebytes31 is bytes32;\\ntype ebytes32 is bytes32;\\n\\ntype externalEbool is bytes32;\\n\\ntype externalEuint8 is bytes32;\\ntype externalEuint16 is bytes32;\\ntype externalEuint24 is bytes32;\\ntype externalEuint32 is bytes32;\\ntype externalEuint40 is bytes32;\\ntype externalEuint48 is bytes32;\\ntype externalEuint56 is bytes32;\\ntype externalEuint64 is bytes32;\\ntype externalEuint72 is bytes32;\\ntype externalEuint80 is bytes32;\\ntype externalEuint88 is bytes32;\\ntype externalEuint96 is bytes32;\\ntype externalEuint104 is bytes32;\\ntype externalEuint112 is bytes32;\\ntype externalEuint120 is bytes32;\\ntype externalEuint128 is bytes32;\\ntype externalEuint136 is bytes32;\\ntype externalEuint144 is bytes32;\\ntype externalEuint152 is bytes32;\\ntype externalEuint160 is bytes32;\\ntype externalEuint168 is bytes32;\\ntype externalEuint176 is bytes32;\\ntype externalEuint184 is bytes32;\\ntype externalEuint192 is bytes32;\\ntype externalEuint200 is bytes32;\\ntype externalEuint208 is bytes32;\\ntype externalEuint216 is bytes32;\\ntype externalEuint224 is bytes32;\\ntype externalEuint232 is bytes32;\\ntype externalEuint240 is bytes32;\\ntype externalEuint248 is bytes32;\\ntype externalEuint256 is bytes32;\\n\\ntype externalEint8 is bytes32;\\ntype externalEint16 is bytes32;\\ntype externalEint24 is bytes32;\\ntype externalEint32 is bytes32;\\ntype externalEint40 is bytes32;\\ntype externalEint48 is bytes32;\\ntype externalEint56 is bytes32;\\ntype externalEint64 is bytes32;\\ntype externalEint72 is bytes32;\\ntype externalEint80 is bytes32;\\ntype externalEint88 is bytes32;\\ntype externalEint96 is bytes32;\\ntype externalEint104 is bytes32;\\ntype externalEint112 is bytes32;\\ntype externalEint120 is bytes32;\\ntype externalEint128 is bytes32;\\ntype externalEint136 is bytes32;\\ntype externalEint144 is bytes32;\\ntype externalEint152 is bytes32;\\ntype externalEint160 is bytes32;\\ntype externalEint168 is bytes32;\\ntype externalEint176 is bytes32;\\ntype externalEint184 is bytes32;\\ntype externalEint192 is bytes32;\\ntype externalEint200 is bytes32;\\ntype externalEint208 is bytes32;\\ntype externalEint216 is bytes32;\\ntype externalEint224 is bytes32;\\ntype externalEint232 is bytes32;\\ntype externalEint240 is bytes32;\\ntype externalEint248 is bytes32;\\ntype externalEint256 is bytes32;\\n\\ntype externalEaddress is bytes32;\\n\\ntype externalEbytes1 is bytes32;\\ntype externalEbytes2 is bytes32;\\ntype externalEbytes3 is bytes32;\\ntype externalEbytes4 is bytes32;\\ntype externalEbytes5 is bytes32;\\ntype externalEbytes6 is bytes32;\\ntype externalEbytes7 is bytes32;\\ntype externalEbytes8 is bytes32;\\ntype externalEbytes9 is bytes32;\\ntype externalEbytes10 is bytes32;\\ntype externalEbytes11 is bytes32;\\ntype externalEbytes12 is bytes32;\\ntype externalEbytes13 is bytes32;\\ntype externalEbytes14 is bytes32;\\ntype externalEbytes15 is bytes32;\\ntype externalEbytes16 is bytes32;\\ntype externalEbytes17 is bytes32;\\ntype externalEbytes18 is bytes32;\\ntype externalEbytes19 is bytes32;\\ntype externalEbytes20 is bytes32;\\ntype externalEbytes21 is bytes32;\\ntype externalEbytes22 is bytes32;\\ntype externalEbytes23 is bytes32;\\ntype externalEbytes24 is bytes32;\\ntype externalEbytes25 is bytes32;\\ntype externalEbytes26 is bytes32;\\ntype externalEbytes27 is bytes32;\\ntype externalEbytes28 is bytes32;\\ntype externalEbytes29 is bytes32;\\ntype externalEbytes30 is bytes32;\\ntype externalEbytes31 is bytes32;\\ntype externalEbytes32 is bytes32;\\n\",\"keccak256\":\"0x5da9799cd5c30067ea946164722197151baee1f2579a76f01874d4fb25df02a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061018c6100b0604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b6120b38061019b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636731ff30116100de578063917975a111610097578063da1f12ab11610071578063da1f12ab146103b2578063ddf86e4b146103ba578063e5de8828146103cd578063eb8f43ef146103ed57600080fd5b8063917975a11461035a578063b6e7687314610362578063d80a84341461038257600080fd5b80636731ff30146102d45780636c69b27e146102dc5780636fedff14146102fc578063771164d41461030f5780638c2f4d94146101785780638d6d49251461032f57600080fd5b806333a14eeb1161013057806333a14eeb1461022657806334461067146102515780633bf8d8fa14610278578063409f6c631461029857806344803794146102a157806347d212da146102c157600080fd5b80630edb15a814610178578063125f8974146101935780631d74185c1461019c5780631f941648146101da57806323415135146101e3578063264f9003146101f8575b600080fd5b610180600a81565b6040519081526020015b60405180910390f35b610180600b5481565b6101ca6101aa366004611958565b600160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161018a565b61018060025481565b6101f66101f1366004611984565b61040d565b005b6101ca610206366004611958565b600a60209081526000928352604080842090915290825290205460ff1681565b61018061023436600461199d565b600860209081526000928352604080842090915290825290205481565b61026461025f366004611984565b610632565b60405161018a989796959493929190611a17565b610180610286366004611a94565b60056020526000908152604090205481565b61018061025881565b6101806102af366004611a94565b60046020526000908152604090205481565b6101f66102cf366004611a94565b61089d565b610180603281565b6101806102ea366004611984565b60036020526000908152604090205481565b6101f661030a366004611b54565b61090d565b61032261031d366004611c14565b610b7c565b60405161018a9190611ce0565b600954610342906001600160a01b031681565b6040516001600160a01b03909116815260200161018a565b610180600181565b610375610370366004611984565b610f2c565b60405161018a9190611d45565b61039561039036600461199d565b61122a565b60408051931515845260208401929092529082015260600161018a565b612711610180565b6101f66103c8366004611d58565b6112c5565b6101806103db366004611a94565b60066020526000908152604090205481565b6101806103fb366004611a94565b60076020526000908152604090205481565b6009546001600160a01b031661045a5760405162461bcd60e51b815260206004820152600d60248201526c18985919d9481b9bdd081cd95d609a1b60448201526064015b60405180910390fd5b6000818152600a6020908152604080832033845290915290205460ff16156104b65760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b6044820152606401610451565b60006104c2338361122a565b50509050806105025760405162461bcd60e51b815260206004820152600c60248201526b6e6f7420656c696769626c6560a01b6044820152606401610451565b60095460405133602482015260448101849052600160648201526000916001600160a01b03169060840160408051601f198184030181529181526020820180516001600160e01b0316630ab714fb60e11b179052516105619190611ddb565b6000604051808303816000865af19150503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b50509050806105e25760405162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b6044820152606401610451565b6000838152600a60209081526040808320338085529252808320805460ff191660011790555185927fbdaec09f93a9e010d98b043dd79efaaa052a0eed6b10c9ffe87c8f7e256da56f91a3505050565b60006020819052908152604090208054600182015460028301805492936001600160a01b039092169261066490611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461069090611df7565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b5050505050908060030180546106f290611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461071e90611df7565b801561076b5780601f106107405761010080835404028352916020019161076b565b820191906000526020600020905b81548152906001019060200180831161074e57829003601f168201915b50505050509080600401805461078090611df7565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac90611df7565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b50505050509080600501805461080e90611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461083a90611df7565b80156108875780601f1061085c57610100808354040283529160200191610887565b820191906000526020600020905b81548152906001019060200180831161086a57829003601f168201915b5050505050908060060154908060070154905088565b6009546001600160a01b031615806108b457503332145b6108eb5760405162461bcd60e51b8152602060048201526008602482015267666f722064656d6f60c01b6044820152606401610451565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600760205260409020546102589061092b9042611e47565b101561096b5760405162461bcd60e51b815260206004820152600f60248201526e39bab136b4ba1031b7b7b63237bbb760891b6044820152606401610451565b336000908152600760205260408120429055600b8054829061098c90611e5a565b91829055509050600061099e8161156f565b60408051610100810182528481523360208083019182528284018b8152606084018b9052608084018a905260a084018990524260c085015260e084018690526000888152918290529390208251815590516001820180546001600160a01b0319166001600160a01b039092169190911790559151929350916002820190610a259082611ec2565b5060608201516003820190610a3a9082611ec2565b5060808201516004820190610a4f9082611ec2565b5060a08201516005820190610a649082611ec2565b5060c0820151600682015560e09091015160079182015560008381526020819052604090200154610a9490611582565b50600082815260208190526040902060070154610ab19033611592565b50604051829033907ff2a3918256e8cabe6f6b0eb6b22ce0f71b6c9e6ea03c0081ea19362ce4285c3f90600090a3600160036000868051906020012081526020019081526020016000206000828254610b0a9190611f81565b9091555050336000908152600460205260408120805460019290610b2f908490611f81565b90915550506009546001600160a01b031615610b745760405160019033907f5e9e873f367c553d8da82e77d1e65e3945eb078cdf69fe4479b07dcab91eff5f90600090a35b505050505050565b6060600b548310610bc0576040805160008082526020820190925290610bb8565b610ba56118eb565b815260200190600190039081610b9d5790505b509050610f26565b6000610bcc8385611f81565b9050600b54811115610bdd5750600b545b6000610be98583611e47565b905060008167ffffffffffffffff811115610c0657610c06611aaf565b604051908082528060200260200182016040528015610c3f57816020015b610c2c6118eb565b815260200190600190039081610c245790505b50905060005b82811015610f205760008082610c5c8a6001611f81565b610c669190611f81565b815260208082019290925260409081016000208151610100810183528154815260018201546001600160a01b0316938101939093526002810180549192840191610caf90611df7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdb90611df7565b8015610d285780601f10610cfd57610100808354040283529160200191610d28565b820191906000526020600020905b815481529060010190602001808311610d0b57829003601f168201915b50505050508152602001600382018054610d4190611df7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6d90611df7565b8015610dba5780601f10610d8f57610100808354040283529160200191610dba565b820191906000526020600020905b815481529060010190602001808311610d9d57829003601f168201915b50505050508152602001600482018054610dd390611df7565b80601f0160208091040260200160405190810160405280929190818152602001828054610dff90611df7565b8015610e4c5780601f10610e2157610100808354040283529160200191610e4c565b820191906000526020600020905b815481529060010190602001808311610e2f57829003601f168201915b50505050508152602001600582018054610e6590611df7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9190611df7565b8015610ede5780601f10610eb357610100808354040283529160200191610ede565b820191906000526020600020905b815481529060010190602001808311610ec157829003601f168201915b5050505050815260200160068201548152602001600782015481525050828281518110610f0d57610f0d611f94565b6020908102919091010152600101610c45565b50925050505b92915050565b610f346118eb565b6000828152602081905260409020600101546001600160a01b0316610f8e5760405162461bcd60e51b815260206004820152601060248201526f149958dbdc99081b9bdd08199bdd5b9960821b6044820152606401610451565b600082815260208181526040918290208251610100810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610fd790611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461100390611df7565b80156110505780601f1061102557610100808354040283529160200191611050565b820191906000526020600020905b81548152906001019060200180831161103357829003601f168201915b5050505050815260200160038201805461106990611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461109590611df7565b80156110e25780601f106110b7576101008083540402835291602001916110e2565b820191906000526020600020905b8154815290600101906020018083116110c557829003601f168201915b505050505081526020016004820180546110fb90611df7565b80601f016020809104026020016040519081016040528092919081815260200182805461112790611df7565b80156111745780601f1061114957610100808354040283529160200191611174565b820191906000526020600020905b81548152906001019060200180831161115757829003601f168201915b5050505050815260200160058201805461118d90611df7565b80601f01602080910402602001604051908101604052809291908181526020018280546111b990611df7565b80156112065780601f106111db57610100808354040283529160200191611206565b820191906000526020600020905b8154815290600101906020018083116111e957829003601f168201915b50505050508152602001600682015481526020016007820154815250509050919050565b600080600083600103611260575050506001600160a01b03821660009081526004602052604090205460018082101591906112be565b83600203611291575050506001600160a01b038216600090815260066020526040902054600a8082101591906112be565b836003036112be575050506001600160a01b038216600090815260056020526040902054600a8082101591905b9250925092565b600084815260208190526040902060018101546001600160a01b03166113205760405162461bcd60e51b815260206004820152601060248201526f149958dbdc99081b9bdd08199bdd5b9960821b6044820152606401610451565b600085815260016020908152604080832033845290915290205460ff161561137e5760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481cdd5c1c1bdc9d1959607a1b6044820152606401610451565b600061138d6201518042611faa565b3360009081526008602090815260408083208484529091529020549091506032116113f05760405162461bcd60e51b815260206004820152601360248201527219185a5b1e481cdd5c1c1bdc9d081b1a5b5a5d606a1b6044820152606401610451565b60006114328686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115a592505050565b90506114428360070154826115ba565b6007840181905561145290611582565b506007830154600184015461147091906001600160a01b0316611592565b5061147f836007015433611592565b5060008781526001602081815260408084203385528252808420805460ff1916841790556008825280842086855290915282208054919290916114c3908490611f81565b925050819055506001600260008282546114dd9190611f81565b9091555050336000908152600560205260408120805460019290611502908490611f81565b90915550506001838101546001600160a01b031660009081526006602052604081208054909190611534908490611f81565b9091555050604051339088907f630e5f5b881f23b2150daa405fee7683f53cee92b5e371392ca9b168cda9f0d790600090a350505050505050565b6000610f268263ffffffff1660046115ec565b600061158e823061169b565b5090565b600061159e838361169b565b5090919050565b60006115b383836004611718565b9392505050565b6000826115ce576115cb600061156f565b92505b816115e0576115dd600061156f565b91505b6115b38383600061182f565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b815260009160008051602061205e833981519152916001600160a01b0390911690639cd07acb906116509087908790600401611fee565b6020604051808303816000875af115801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190612002565b949350505050565b600060008051602061205e8339815191528054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b6290604401600060405180830381600087803b1580156116fb57600080fd5b505af115801561170f573d6000803e3d6000fd5b50505050505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b815260009160008051602061205e833981519152916001600160a01b039091169063196d0b9b9061178090889033908990899060040161201b565b6020604051808303816000875af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612002565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec90604401600060405180830381600087803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b50505050509392505050565b60008082156118435750600160f81b611847565b5060005b600060008051602061205e833981519152600181015460405163022f65e760e31b815260048101899052602481018890526001600160f81b0319851660448201529192506001600160a01b03169063117b2f38906064016020604051808303816000875af11580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e19190612002565b9695505050505050565b6040518061010001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200160008152602001600080191681525090565b80356001600160a01b038116811461195357600080fd5b919050565b6000806040838503121561196b57600080fd5b8235915061197b6020840161193c565b90509250929050565b60006020828403121561199657600080fd5b5035919050565b600080604083850312156119b057600080fd5b6119b98361193c565b946020939093013593505050565b60005b838110156119e25781810151838201526020016119ca565b50506000910152565b60008151808452611a038160208601602086016119c7565b601f01601f19169290920160200192915050565b8881526001600160a01b038816602082015261010060408201819052600090611a42908301896119eb565b8281036060840152611a5481896119eb565b90508281036080840152611a6881886119eb565b905082810360a0840152611a7c81876119eb565b60c0840195909552505060e001529695505050505050565b600060208284031215611aa657600080fd5b6115b38261193c565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611ad657600080fd5b813567ffffffffffffffff811115611af057611af0611aaf565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611b1f57611b1f611aaf565b604052818152838201602001851015611b3757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611b6a57600080fd5b843567ffffffffffffffff811115611b8157600080fd5b611b8d87828801611ac5565b945050602085013567ffffffffffffffff811115611baa57600080fd5b611bb687828801611ac5565b935050604085013567ffffffffffffffff811115611bd357600080fd5b611bdf87828801611ac5565b925050606085013567ffffffffffffffff811115611bfc57600080fd5b611c0887828801611ac5565b91505092959194509250565b60008060408385031215611c2757600080fd5b50508035926020909101359150565b8051825260006020820151611c5660208501826001600160a01b03169052565b5060408201516101006040850152611c726101008501826119eb565b905060608301518482036060860152611c8b82826119eb565b91505060808301518482036080860152611ca582826119eb565b91505060a083015184820360a0860152611cbf82826119eb565b91505060c083015160c085015260e083015160e08501528091505092915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015611d3957603f19878603018452611d24858351611c36565b94506020938401939190910190600101611d08565b50929695505050505050565b6020815260006115b36020830184611c36565b60008060008060608587031215611d6e57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115611d9357600080fd5b8501601f81018713611da457600080fd5b803567ffffffffffffffff811115611dbb57600080fd5b876020828401011115611dcd57600080fd5b949793965060200194505050565b60008251611ded8184602087016119c7565b9190910192915050565b600181811c90821680611e0b57607f821691505b602082108103611e2b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f2657610f26611e31565b600060018201611e6c57611e6c611e31565b5060010190565b601f821115611ebd57806000526020600020601f840160051c81016020851015611e9a5750805b601f840160051c820191505b81811015611eba5760008155600101611ea6565b50505b505050565b815167ffffffffffffffff811115611edc57611edc611aaf565b611ef081611eea8454611df7565b84611e73565b6020601f821160018114611f245760008315611f0c5750848201515b600019600385901b1c1916600184901b178455611eba565b600084815260208120601f198516915b82811015611f545787850151825560209485019460019092019101611f34565b5084821015611f725786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b80820180821115610f2657610f26611e31565b634e487b7160e01b600052603260045260246000fd5b600082611fc757634e487b7160e01b600052601260045260246000fd5b500490565b60548110611fea57634e487b7160e01b600052602160045260246000fd5b9052565b828152604081016115b36020830184611fcc565b60006020828403121561201457600080fd5b5051919050565b8481526001600160a01b0384166020820152608060408201819052600090612045908301856119eb565b90506120546060830184611fcc565b9594505050505056fe9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700a264697066735822122040c20b048c174286bfe6bc469f6388699786b09cd84e34390565f7332343537064736f6c634300081b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportAction(uint256,bytes32,bytes)": {
        "params": {
          "incEnc": "外部加密增量（e.g. 1）",
          "inputProof": "输入证明",
          "recordId": "记录 id"
        }
      }
    },
    "title": "ChildGuard – 儿童保护行动存证（FHE 增强）",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAction(uint256)": {
        "notice": "获取单条记录（包含密文支持计数句柄）"
      },
      "getActions(uint256,uint256)": {
        "notice": "获取一页记录（分页，避免 getAllActions 过大）"
      },
      "submitAction(string,string,string,string)": {
        "notice": "提交行动（支持计数初始化为 0 的密文）"
      },
      "supportAction(uint256,bytes32,bytes)": {
        "notice": "点赞支持（每地址对同一 id 仅一次），传入加密增量（通常为 1）"
      }
    },
    "notice": "使用 FHE 对支持计数进行加密存储，公开查询返回密文句柄，解密须经授权",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 39059,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "records",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ActionRecord)39054_storage)"
      },
      {
        "astId": 39065,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "supported",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 39067,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "totalSupports",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 39071,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "regionCounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 39075,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "submitCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39079,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "supportGivenCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39083,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "supportReceivedCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39093,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "lastSubmitAt",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39099,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "supportsPerDay",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 39101,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "badgeContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 39107,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "badgeClaimed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 39118,
        "contract": "contracts/ChildGuard.sol:ChildGuard",
        "label": "totalRecords",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(ActionRecord)39054_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChildGuard.ActionRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ActionRecord)39054_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ActionRecord)39054_storage": {
        "encoding": "inplace",
        "label": "struct ChildGuard.ActionRecord",
        "members": [
          {
            "astId": 39038,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 39040,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "submitter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 39042,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 39044,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "descriptionHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 39046,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "region",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 39048,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 39050,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 39053,
            "contract": "contracts/ChildGuard.sol:ChildGuard",
            "label": "supportCountEnc",
            "offset": 0,
            "slot": "7",
            "type": "t_userDefinedValueType(euint32)39710"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(euint32)39710": {
        "encoding": "inplace",
        "label": "euint32",
        "numberOfBytes": "32"
      }
    }
  }
}